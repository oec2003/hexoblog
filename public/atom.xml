<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冯威的个人博客</title>
  <subtitle>临渊羡鱼 不如退而结网</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.fwhyy.com/"/>
  <updated>2016-10-15T14:59:44.000Z</updated>
  <id>http://www.fwhyy.com/</id>
  
  <author>
    <name>oec2003</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读《软技能》---敏捷个人管理</title>
    <link href="http://www.fwhyy.com/2016/10/reading-soft-skills-agile-personal-management/"/>
    <id>http://www.fwhyy.com/2016/10/reading-soft-skills-agile-personal-management/</id>
    <published>2016-10-15T14:53:26.000Z</published>
    <updated>2016-10-15T14:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>《软技能》是一本写给技术人员的非技术类书籍，即使你不写代码，读读这本书也可以受益不少。书中涉猎甚广，甚至有理财、健身、心理等内容。读完这本书，有一种相见恨晚的感觉。</p>
<p>本书通篇在讲各个方面个人的成长，个人成长就需要自己对自己进行管理，敏捷的思想我认为核心就是快速迭代，用到个人身上就是要有很多的小目标，以迭代的方式向前进，最终实现大目标，这种方式可以让我们能快速试错，及时调整方向；也能让我们能快速看到一些成果，激励自己向前。<br><a id="more"></a></p>
<h2 id="向企业一样思考"><a href="#向企业一样思考" class="headerlink" title="向企业一样思考"></a>向企业一样思考</h2><p>书中提到一个在我看来比较新颖的观点：<strong>将自己当作一个企业来思考</strong></p>
<blockquote>
<p>企业通常会售卖产品或提供服务，程序员能提供的就是写代码的技能；<br>企业需要不断改进和完善自己的产品，程序员也需要持续的学习提升自己的技能；<br>企业要想自己的产品能被客户认可，在众多竞争中脱引而出，需要做到与众不同，程序员要想得到上级甚至公司的认可，就需要能表现出明显强于其他人的地方。</p>
</blockquote>
<p>可能有朋友会说，我又没有经营过企业，怎样像将自己当一个企业来思考？是的，大多数人或许没有管理一个企业的经验，但应该都有被管理的经验，身处一个企业当中，有很多事情是可以<strong>换位思考</strong>的。当我们想要升职加薪时可以换位思考下，如果你是老板，你会给什么样的员工升职加薪，想清楚这些问题，你就知道应该怎么做了。</p>
<p>在公司中经常会出现这样的情况，公司的成长往往会“落后于”员工的成长，每个人在入职一家公司时肯定是认为当时的薪资和自己的能力是匹配的，经过一段时间之后，员工就会认为自己的能力有很大提高需要涨工资，公司认为你每天做的事情就是你拿这个工资应该做的，这就形成了一种矛盾，最终结果就是员工可能离职另谋高就了。</p>
<p>想让公司主动为自己加薪，或者让自己有资本去和公司谈薪资，可以从下面两个方面着手：</p>
<p>1、就需要能承担更多的责任</p>
<ul>
<li>做别人不愿意做的事情，例如遗留的系统优化、主动做一些巡检，修复一些bug；</li>
<li>帮助团队的新人成长，当你能将一个问题向新人讲明白时，自己也会得到提高；</li>
<li>在平时工作中除了本职工作，多思考，多想想怎样能够提高开发效率，首先是对自己，更重要的是要对整个团队有帮助。我经常对团队成员讲我之前的一个例子：当时在一家知名房地产ERP软件公司做开发，起初是为了自己方便写了一个小工具，后来慢慢推广在整个部门都在使用，我相信后来升为开发Leader和薪水的调整应该和这件事情分不开。</li>
</ul>
<p>2、引起领导重视</p>
<ul>
<li><strong>让领导知道自己在做什么。</strong> 你多承担的责任、工作之外额外的共享、对团队成员的帮助等等，要让你的直属领导或是公司领导知道并认可。前提是你确确实实做了这些事情，如果想弄虚作假，靠糊弄，只会适得其反。</li>
<li><strong>主动做分享，团队内交流。</strong> 很多公司都有团队内的技术分享的制度，可以是和工作相关的，也可以是感兴趣的技术点，这种机会应该要抓住，争取更多的做分享人，如果是在一个较大的公司中，时间长了，你便会成为别人都“认识”的人。如果你所在的公司没有内部分享制度，你也可以自己去组织类似的分享会。</li>
</ul>
<h2 id="个人品牌建立"><a href="#个人品牌建立" class="headerlink" title="个人品牌建立"></a>个人品牌建立</h2><p>个人品牌的建立是自我营销的一种方式，也是提升个人价值的一种方式。书中提供了多种建立个人品牌的方式：写博客、录制播客、写书（出版社或自出版）、参加技术大会（可以先从公司内部分享做起）。有些方式对于大多数人来说可能有些困难，但写博客是人人都可以去做的。</p>
<p>写博客的目的有很多种，如果是以建立个人品牌为目的，就需要利用自己的专长在一些特定的领域持续输出高质量的文章，如果觉得自己没有专长的，就需要通过学习找到自己的专长，或者一个兴趣点也可以，只有在一个细分市场站住脚跟，才容易让自己保持激情，也更容易吸引读者的关注。例如微信公众号 MacTalk 的作者池建强在开始写公众号时就是以 Mac 技巧为突破口的。</p>
<p>写博客也是一件非常容易的事情，只要你想写，花5分钟在一个写作平台上注册账号，剩下的就是持续的产出了。比如技术人员可以选择<a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a>、<a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a> 等，其他的还有知乎专栏、简书等。如果你喜欢折腾，可以自己购买域名和空间搭建自己的独立博客，有很多的博客程序员可以使用，如：WordPress、Hexo、Octopress等。在一些知名平台上发布文章，更容让更多的人阅读到你的内容，想要获得更多的影响力，就不能只为自己而写，需要和读者一起互动，也需要经常去别人的博客中参与讨论。</p>
<p>除了写博客我认为自出版书也是个不错的选择，当你在系统的学习某些东西时，可以产出系列文章，这些系统文章其实就可以组织成书，现在有GitBook、GitHub这样的平台可以让你很好的将写的文章分享出去。如果你达到了一定的水准，还可以到自出版的平台进行出售，现在我了解到的平台有：</p>
<h3 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h3><ul>
<li><a href="http://www.epubit.com.cn/article/78" target="_blank" rel="external">http://www.epubit.com.cn/article/78</a> </li>
<li><a href="http://zhibimo.com/" target="_blank" rel="external">http://zhibimo.com/</a></li>
</ul>
<h3 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h3><ul>
<li><a href="https://gumroad.com/" target="_blank" rel="external">https://gumroad.com/</a></li>
<li><a href="https://sellfy.com/" target="_blank" rel="external">https://sellfy.com/</a></li>
<li><a href="https://leanpub.com/" target="_blank" rel="external">https://leanpub.com/</a></li>
<li><a href="https://play.google.com/books/publish/" target="_blank" rel="external">https://play.google.com/books/publish/</a> （仅限国外）</li>
<li><a href="https://www.apple.com/itunes/working-itunes/sell-content/books/" target="_blank" rel="external">https://www.apple.com/itunes/working-itunes/sell-content/books/</a> （仅限国外）</li>
<li><a href="https://kdp.amazon.com/" target="_blank" rel="external">https://kdp.amazon.com/</a> （仅限国外）</li>
</ul>
<h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><p>好的身体是革命的本钱，本书的作者也是一名健身达人。每个人都应该养成运动的习惯，有了运动的习惯，都不用刻意去减肥，时间一长自然量变到质变。</p>
<p>很多朋友应该都有去健身房的经历，我自己也办过好几次的健身房的会员卡，但每次都没能坚持到最后。想运动，其实不用去健身房，一双运动鞋，舒适的T恤短裤，来到户外跑起来就可以。</p>
<p>跑步是比较枯燥的，可以选择在跑步时听听音乐、或者有声书，我在跑步时喜欢在喜马拉雅上找一些感兴趣的栏目来听。即便这样，很多人还是难以坚持，这时就需要时不时的喝点“鸡汤”了，我当时坚持不住的时候就在网上找了些跑马人士的访谈看看，基本都很励志，或是看看之前的各个城市的马拉松比赛的录播，那种现场热烈的气氛会让人很想跑起来。</p>
<p>运动就会涉及到受伤的问题，即便是跑步这么简单的运动也会面临着受伤，今年的4月份的一段时间我加大了跑量，每天早上5～6公里、晚上5～6公里，一段时间后膝盖特别痛，当发现身体有不适时应当立即停止或减量，当时我停止跑步了一个礼拜，每天靠墙静蹲来恢复，这种方法很有效，慢慢膝盖就好了。</p>
<p>运动的目的是健身，千万不要因为急于求成而对身体造成了伤害。当运动成为一种习惯时，你就会享受运动的过程以及运动给我们带来身体上的好处。</p>
<p>2016年4月参加了汉马的健康跑，明年准备报名参加半马，我相信我的跑步之旅不会停止。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>开车上下班的途中一直都听喜马拉雅，一天上班的路上听《代码时间》节目，正好是《软技能》的译者王小刚作为嘉宾在谈《软技能》这本书，最后他提到了两点他认为很重要而书中没有提到的技能，可以算是本文的一个补充：</p>
<blockquote>
<p>语言能力，包括沟通、演讲等等；<br>英语能力</p>
</blockquote>
<p>记得李笑来说过一句话：钱在银行存着不算是我的，只有花出去了才算是我的。书中讲了很多的技巧，方法，我们眼睛看过了不算掌握了，只有将这些付诸实践才算真正掌握，就像我博客副标题写，临渊羡鱼 不如退而结网，所以，立即行动起来吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《软技能》是一本写给技术人员的非技术类书籍，即使你不写代码，读读这本书也可以受益不少。书中涉猎甚广，甚至有理财、健身、心理等内容。读完这本书，有一种相见恨晚的感觉。&lt;/p&gt;
&lt;p&gt;本书通篇在讲各个方面个人的成长，个人成长就需要自己对自己进行管理，敏捷的思想我认为核心就是快速迭代，用到个人身上就是要有很多的小目标，以迭代的方式向前进，最终实现大目标，这种方式可以让我们能快速试错，及时调整方向；也能让我们能快速看到一些成果，激励自己向前。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.fwhyy.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://www.fwhyy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="软技能" scheme="http://www.fwhyy.com/tags/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>jQuery上传插件Uploadify使用详解(3.2.1)</title>
    <link href="http://www.fwhyy.com/2016/09/jquery-upload-plugin-uploadify-3-2-1-use-explanation/"/>
    <id>http://www.fwhyy.com/2016/09/jquery-upload-plugin-uploadify-3-2-1-use-explanation/</id>
    <published>2016-09-25T10:57:49.000Z</published>
    <updated>2016-09-25T15:09:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>六年前，因为工作中使用到 jQuery 的上传组件 Uploadify ，写了一篇《<a href="http://fwhyy.com/2010/01/jquery-upload-plugin-uploadify-use-explanation/" target="_blank" rel="external">JQuery上传插件Uploadify使用详解</a>》的博客来介绍 <a href="http://www.uploadify.com/" target="_blank" rel="external">Uploadify</a> ，其实只是将官方文档简单翻译了下。几年下来居然有50多万的访问量，而且每天通过各种搜索引擎有大几百的朋友会访问到这篇文章。六年时间 Uploadify 从当时的2.1.0到了现在的3.2.1，变化还是挺大，为了对访问到之前那篇博客的朋友还有点价值，特写此篇。</p>
<p>Uploadify 的使用分为属性配置，事件和方法三大块，根据<a href="http://www.uploadify.com/documentation/" target="_blank" rel="external">官方文档</a>，我将这三部分内容写了一个示例项目放在 Github 上，不抵触英文的建议直接看<a href="http://www.uploadify.com/documentation/" target="_blank" rel="external">官方文档</a>，下面是示例的一些截图：</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="http://oec2003.qiniudn.com/14748029914829.jpg" alt=""></p>
<h2 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h2><p><img src="http://oec2003.qiniudn.com/14748030763241.jpg" alt=""></p>
<h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><p><img src="http://oec2003.qiniudn.com/14748031195281.jpg" alt=""></p>
<h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p><img src="http://oec2003.qiniudn.com/14748031418177.jpg" alt=""></p>
<p>好吧，我承认上面几张图就是凑篇幅的，大家可以 clone 或 fork 我 Github 上的项目，自行运行调试。</p>
<ul>
<li>Github 地址：<a href="https://github.com/oec2003/jQueryUploadifySample" target="_blank" rel="external">https://github.com/oec2003/jQueryUploadifySample</a></li>
</ul>
<p>先别急着去下载示例代码，在这里推荐一个上传组件 <a href="http://www.twinkling.cn/" target="_blank" rel="external">Stream</a> ：</p>
<ul>
<li>官方网站：<a href="http://www.twinkling.cn/" target="_blank" rel="external">http://www.twinkling.cn/</a></li>
<li>项目地址：<a href="http://git.oschina.net/jiangdx/stream" target="_blank" rel="external">http://git.oschina.net/jiangdx/stream</a></li>
</ul>
<p>该组件是纯 js 组件，理论上可以支持任何的服务端语言，目前可以支持 Java 、Perl 、PHP 和 Asp.Net ，其中 Asp.Net 的实现是我写的，之前也写了篇博客《<a href="http://fwhyy.com/2015/08/stream-aspnet/" target="_blank" rel="external">开源上传组件stream的.Net后台实现</a>》来介绍，代码实现也放在了 Github上：</p>
<ul>
<li>StreamAsp.Net项目地址：<a href="https://github.com/oec2003/StreamAspNet" target="_blank" rel="external">https://github.com/oec2003/StreamAspNet</a></li>
</ul>
<p>如果觉得对您有所帮助，请帮忙在 Github 上 Star 下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;六年前，因为工作中使用到 jQuery 的上传组件 Uploadify ，写了一篇《&lt;a href=&quot;http://fwhyy.com/2010/01/jquery-upload-plugin-uploadify-use-explanation/&quot; target=&quot;_bla
    
    </summary>
    
      <category term="JQuery" scheme="http://www.fwhyy.com/categories/JQuery/"/>
    
    
      <category term="JQuery" scheme="http://www.fwhyy.com/tags/JQuery/"/>
    
      <category term="Uploadify" scheme="http://www.fwhyy.com/tags/Uploadify/"/>
    
  </entry>
  
  <entry>
    <title>使用ExceptionLess</title>
    <link href="http://www.fwhyy.com/2016/09/use-exceptionLess/"/>
    <id>http://www.fwhyy.com/2016/09/use-exceptionLess/</id>
    <published>2016-09-13T15:03:26.000Z</published>
    <updated>2016-09-13T15:46:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://exceptionless.com/" target="_blank" rel="external">ExceptionLess</a>是一款免费开源的分布式日志收集框架，DotNet的几乎所有类型的程序都可以支持，并且还提供了接口，可以很方便的在js中进行日志的推送。</p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>最近在<a href="http://mp.weixin.qq.com/mp/qrcode?scene=10000005&amp;size=102&amp;__biz=MzAwNTMxMzg1MA==" target="_blank" rel="external">dotNet跨平台</a>的微信公众号得知这个框架，并且连续两天推出了关于ExceptionLess的介绍及安装的文章。下面几篇文章就是关于ExceptionLess介绍及安装的文章：</p>
<p><a href="http://www.cnblogs.com/uptothesky/p/5864863.html" target="_blank" rel="external">http://www.cnblogs.com/uptothesky/p/5864863.html</a><br><a href="http://www.cnblogs.com/savorboard/p/exceptionless.html" target="_blank" rel="external">http://www.cnblogs.com/savorboard/p/exceptionless.html</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzAwNTMxMzg1MA==&amp;mid=2654067937&amp;idx=1&amp;sn=01e502d9ef5cf77817aa80db6903923d&amp;scene=0#wechat_redirect" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzAwNTMxMzg1MA==&amp;mid=2654067937&amp;idx=1&amp;sn=01e502d9ef5cf77817aa80db6903923d&amp;scene=0#wechat_redirect</a></p>
<h2 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h2><p>ExceptionLess的装分为两种：</p>
<ol>
<li>在github上下载clone源码编译安装；</li>
<li>在github上下载release包进行安装。</li>
</ol>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ol>
<li>Window8.1</li>
<li>VS2015</li>
<li>IIS8.5</li>
<li>Java8</li>
<li>ElasticSearch1.7.5</li>
<li><a href="https://github.com/exceptionless/Exceptionless/releases/download/v3.4.1/Exceptionless.3.4.2523.zip" target="_blank" rel="external">Exceptionless.3.4.2523</a></li>
</ol>
<h2 id="clone源码编译安装"><a href="#clone源码编译安装" class="headerlink" title="clone源码编译安装"></a>clone源码编译安装</h2><p>首先尝试第一种，按照文章中的步骤很顺利的将前台门户和后台API部署成功。注册账号进入控制面板后，新建项目总是不能成功，常见提示成功，先还是显示无项目，如下图：</p>
<p><img src="http://oec2003.qiniudn.com/Snip20160912_3.png" alt="Snip20160912_3"></p>
<p>后来F12调试发现提示APIKey没设置，如下图：</p>
<p><img src="http://oec2003.qiniudn.com/Snip20160912_5.png" alt="Snip20160912_5"></p>
<p>这个脚本错误导致很多的操作都无效，网上找了很多的资料，也在群里问过安装成功的朋友，也都没能解决此问题，最终不得不放弃编译的方式部署。</p>
<h2 id="release包进行安装"><a href="#release包进行安装" class="headerlink" title="release包进行安装"></a>release包进行安装</h2><p>1、 下载release包<a href="https://github.com/exceptionless/Exceptionless/releases/download/v3.4.1/Exceptionless.3.4.2523.zip" target="_blank" rel="external">Exceptionless.3.4.2523.zip</a>，该包包含前端UI和后端API；<br>2、解压zip包，包含文件如下图：</p>
<p><img src="http://oec2003.qiniudn.com/Snip20160913_7.png" alt="Snip20160913_7"></p>
<p>3、在IIS中创建站点指向wwwroot目录，站点端口号9001；<br>4、右键“Start-ElasticSearch.ps1“，选择”使用powershell运行“，第一次执行会从网上下载<br>ElasticSearch，这个过程可能会花几分钟时间，执行完后如下图：</p>
<p><img src="http://oec2003.qiniudn.com/Snip20160913_9.png" alt="Snip20160913_9"></p>
<p>5、ElasticSearch的默认端口为9200，在浏览器中访问<a href="http://localhost:9200" target="_blank" rel="external">http://localhost:9200</a> ，出现如下图界面说明安装成功：</p>
<p><img src="http://oec2003.qiniudn.com/Snip20160913_10.png" alt="Snip20160913_10"></p>
<p>6、修改<code>wwwroot</code>目录下的web.config文件：</p>
<p><img src="http://oec2003.qiniudn.com/Snip20160913_11.png" alt="Snip20160913_11"></p>
<ul>
<li>ElasticSearchConnectionString:<a href="http://localhost:9200" target="_blank" rel="external">http://localhost:9200</a></li>
<li>BaseURL:<a href="http://localhost:9001/#" target="_blank" rel="external">http://localhost:9001/#</a></li>
</ul>
<p>7、修改<code>wwwroot</code>下的app.config文件：</p>
<p><img src="http://oec2003.qiniudn.com/Snip20160913_12.png" alt="Snip20160913_12"></p>
<p>8、在浏览器中输入 <a href="http://localhost:9001" target="_blank" rel="external">http://localhost:9001</a> 就可以进行访问了。</p>
<h2 id="ExceptionLess使用"><a href="#ExceptionLess使用" class="headerlink" title="ExceptionLess使用"></a>ExceptionLess使用</h2><p>1、详细的使用方法在上面的链接<a href="http://www.cnblogs.com/savorboard/p/exceptionless.html" target="_blank" rel="external">文章</a>以及官方文档中有详细介绍；<br>2、当使用NuGet安装了ExceptionLess后会在Web.config文件中创建exceptionless节点，除了apikey需要添加serverUrl属性，该属性配置ExceptionLess的WebAPI的地址，因为本例中UI和API都在9011端口下，所以配置为:<a href="http://localhost:9001" target="_blank" rel="external">http://localhost:9001</a> ，如下图：</p>
<p><img src="http://oec2003.qiniudn.com/Snip20160913_13.png" alt="Snip20160913_13"></p>
<p>3、在JS中使用也是一样，需要配置serverUrl地址，否则就会推送到默认地址了：</p>
<p><img src="http://oec2003.qiniudn.com/14737807459872.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://exceptionless.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExceptionLess&lt;/a&gt;是一款免费开源的分布式日志收集框架，DotNet的几乎所有类型的程序都可以支持，并且还提供了接口，可以很方
    
    </summary>
    
      <category term="Asp.Net" scheme="http://www.fwhyy.com/categories/Asp-Net/"/>
    
    
      <category term="ExceptionLess" scheme="http://www.fwhyy.com/tags/ExceptionLess/"/>
    
      <category term="日志" scheme="http://www.fwhyy.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="Asp.Net" scheme="http://www.fwhyy.com/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>谈谈加班</title>
    <link href="http://www.fwhyy.com/2016/09/Talk-about-overtime/"/>
    <id>http://www.fwhyy.com/2016/09/Talk-about-overtime/</id>
    <published>2016-09-08T15:22:06.000Z</published>
    <updated>2016-09-08T15:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天谈谈加班这个敏感的话题，相信大家在职场中都或多或少的经历过加班。特别是 IT 这个行业，加班更是家常便饭。加班通常有这么四类：</p>
<h2 id="主动加班"><a href="#主动加班" class="headerlink" title="主动加班"></a>主动加班</h2><p>主动型加班常见于刚毕业走上工作岗位的新兵蛋子，常常一个人无牵无挂，一人吃饱全家不饿，下班后继续奋战到九十点钟，可能是当天未完成的工作，也可能是学习自己感兴趣的技术。吹着空调，享受着下班后飞快的网速，键盘上手指如飞，一行行优美的代码在屏幕上呈现。这种加班的过程是享受的，一个对技术热爱的开发人员应该都会经历这个阶段。</p>
<p>如果您才刚刚毕业，如果您对技术很热爱，如果您对公司条件允许，那么多给一些自己这样的班加吧。毕业后头三年往往是知识积累、技术成长的黄金时期，因为往后生活中的各种琐事会占据你大量的时间，常常都是心有余而力不足。</p>
<h2 id="被动加班"><a href="#被动加班" class="headerlink" title="被动加班"></a>被动加班</h2><p>我曾经工作过的M公司，算是一个中大型公司，有很严格的KPI考核制度，每次晚上九十点钟经过公司楼下，都可以看到四层楼灯火通明，大量为了KPI而奋斗的程序员还在工位上辛勤地编写着代码。或许他们对正在写的东西并没有那么大的兴趣，仅仅只是为了可能会多一点的绩效工资，甚至只是为了不被淘汰。</p>
<p>随着自己技能的成长、对业务的熟悉，慢慢这种加班会越来越少，你成为了团队中的主力，负责更重要的工作任务，相应的也会承担更多的责任，团队了新手也会步入你的后尘，晚上九十点钟，公司大楼依旧灯火通明。</p>
<p>这是一种过程、一种历练、能挺过去就犹如涅槃重生，羽翼更丰、技能更强。但往往很多人选择了逃避，逃避的人永远都活在自己的舒适区，这种人无法承担重要的任务，终将被淘汰。</p>
<p>虽然很多时候都是被动在加班，但我们是否能将被动变为主动，像经营一家企业一样来经营自己，使自己变得越来越强。</p>
<h2 id="为“领导”而加班"><a href="#为“领导”而加班" class="headerlink" title="为“领导”而加班"></a>为“领导”而加班</h2><p>有一种加班叫为了领导而加班，公司有一种加班文化，下班后即使没事，也要继续“工作”个一两个小时，有的上着网，有的打打游戏，为的就是在领导面前混个“加班”的印象。如果领导是按照这种主观的印象来给员工打分的话，这种工作还是远离的好。很幸运，我工作近10年还未碰到这种公司。</p>
<h2 id="为“金钱”而加班"><a href="#为“金钱”而加班" class="headerlink" title="为“金钱”而加班"></a>为“金钱”而加班</h2><p>最近在一前公司的离职群里有人发消息说新公司推出了加班政策：</p>
<blockquote>
<p>每月加班时长前10名，分别给10k……1k的奖金；<br>平均加班时长最长的组团队额外有5k奖金。</p>
</blockquote>
<p>我前同事一个月加班226个小时，居然还没挤进前十，竞争之激烈令人发指，这种加班除了能得到一些眼前利益外，对个人成长没有任何好处，何况还不一定能得到。所以这种加班还是尽量避免，否则就会丢了芝麻也丢了西瓜。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天谈谈加班这个敏感的话题，相信大家在职场中都或多或少的经历过加班。特别是 IT 这个行业，加班更是家常便饭。加班通常有这么四类：&lt;/p&gt;
&lt;h2 id=&quot;主动加班&quot;&gt;&lt;a href=&quot;#主动加班&quot; class=&quot;headerlink&quot; title=&quot;主动加班&quot;&gt;&lt;/a&gt;主
    
    </summary>
    
      <category term="经验总结" scheme="http://www.fwhyy.com/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="经验总结" scheme="http://www.fwhyy.com/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
      <category term="加班" scheme="http://www.fwhyy.com/tags/%E5%8A%A0%E7%8F%AD/"/>
    
  </entry>
  
  <entry>
    <title>Remoting 外网访问</title>
    <link href="http://www.fwhyy.com/2016/09/remoting-external-access/"/>
    <id>http://www.fwhyy.com/2016/09/remoting-external-access/</id>
    <published>2016-09-06T14:01:52.000Z</published>
    <updated>2016-09-06T14:38:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Remoting 是一种很古老的分布式技术，如果不清楚的可以参考下面三篇博客，写的非常详细：</p>
<p><a href="http://www.cnblogs.com/wayfarer/archive/2004/07/30/28723.html" target="_blank" rel="external">Microsoft .Net Remoting系列专题之一:.Net Remoting基础篇</a></p>
<p><a href="http://www.cnblogs.com/wayfarer/archive/2004/08/05/30437.html" target="_blank" rel="external">Microsoft .Net Remoting系列专题之二：Marshal、Disconnect与生命周期以及跟踪服务</a></p>
<p><a href="http://www.cnblogs.com/wayfarer/articles/75213.html" target="_blank" rel="external">Microsoft .Net Remoting系列专题之三：Remoting事件处理全接触</a></p>
<p>最近解决公司一个老平台的问题，该平台中使用了 Remoting 技术，现有的环境大致如下：</p>
<p>1、Remoting 服务和 Web 都是部署在局域网；<br>2、多台 Web 都是通过内网 IP 和端口来访问 Remoting 。</p>
<p>Remoting 服务端的代码如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    int serverPort = <span class="number">10000</span><span class="comment">;</span></div><div class="line">    TcpServerChannel Channel = new TcpServerChannel(serverPort)<span class="comment">;</span></div><div class="line">    ChannelServices.RegisterChannel(Channel, false)<span class="comment">;</span></div><div class="line">RemotingConfiguration.RegisterWellKnownServiceType(typeof(RemotingServer),<span class="string">"Server.RemotingServer"</span>,WellKnownObjectMode.Singleton)<span class="comment">;</span></div><div class="line">    Console.ReadLine()<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>现在的问题是，Web 和 RemontingServer 都是部署在外网，有一个客户端程序需要通过 Remoting 来连接到外网到 RemotingServer ，这时需要将服务端的代码修改如下：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> serverIP = <span class="string">"51.123.1.11"</span>; //外网IP</div><div class="line">   <span class="built_in">string</span> serverPort = <span class="string">"10000"</span>;</div><div class="line">   <span class="built_in">var</span> <span class="built_in">properties</span> = <span class="built_in">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</div><div class="line">   <span class="built_in">properties</span>[<span class="string">"machineName"</span>] = serverIP;</div><div class="line">   <span class="built_in">properties</span>[<span class="string">"port"</span>] = serverPort;</div><div class="line">   <span class="built_in">var</span> sinkProvider = <span class="built_in">new</span> BinaryServerFormatterSinkProvider();</div><div class="line">   <span class="built_in">var</span> Channel = <span class="built_in">new</span> TcpServerChannel(<span class="built_in">properties</span>, sinkProvider);</div><div class="line"></div><div class="line">   ChannelServices.RegisterChannel(Channel, <span class="literal">false</span>);</div><div class="line">   RemotingConfiguration.RegisterWellKnownServiceType</div><div class="line">       (typeof(RemotingServer), </div><div class="line">       <span class="string">"Server.RemotingServer"</span>, </div><div class="line">       WellKnownObjectMode.Singleton);</div><div class="line">   Console.ReadLine();</div></pre></td></tr></table></figure>
<p>像上面这样修改后，本地客户端可以正常连接 RemotingServer ，但部署在外网的Web就不能访问 RemotingServer 了。如果将上面代码的 <code>serverIP</code> 修改成内网 IP ，外网 Web 可以访问，本地客户端又不能访问了。最后的解决方法是：</p>
<p>1、Remoting 服务端代码中的 <code>serverIP</code> 使用服务器的机器名，假设机器名为 RemotingServer ，代码如下：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> serverIP = <span class="string">"RemotingServer"</span>; //服务器机器名</div><div class="line">   <span class="built_in">string</span> serverPort = <span class="string">"10000"</span>;</div><div class="line">   <span class="built_in">var</span> <span class="built_in">properties</span> = <span class="built_in">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</div><div class="line">   <span class="built_in">properties</span>[<span class="string">"machineName"</span>] = serverIP;</div><div class="line">   <span class="built_in">properties</span>[<span class="string">"port"</span>] = serverPort;</div><div class="line">   <span class="built_in">var</span> sinkProvider = <span class="built_in">new</span> BinaryServerFormatterSinkProvider();</div><div class="line">   <span class="built_in">var</span> Channel = <span class="built_in">new</span> TcpServerChannel(<span class="built_in">properties</span>, sinkProvider);</div><div class="line"></div><div class="line">   ChannelServices.RegisterChannel(Channel, <span class="literal">false</span>);</div><div class="line">   RemotingConfiguration.RegisterWellKnownServiceType</div><div class="line">       (typeof(RemotingServer), </div><div class="line">       <span class="string">"Server.RemotingServer"</span>, </div><div class="line">       WellKnownObjectMode.Singleton);</div><div class="line">   Console.ReadLine();</div></pre></td></tr></table></figure>
<p>2、修改本地 hosts 文件，将外网 IP <code>51.123.1.11</code>映射为 RemotingServer 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Remoting 是一种很古老的分布式技术，如果不清楚的可以参考下面三篇博客，写的非常详细：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wayfarer/archive/2004/07/30/28723.html&quot; target=&quot;_bl
    
    </summary>
    
      <category term="DotNet" scheme="http://www.fwhyy.com/categories/DotNet/"/>
    
    
      <category term="DotNet" scheme="http://www.fwhyy.com/tags/DotNet/"/>
    
      <category term="Remoting" scheme="http://www.fwhyy.com/tags/Remoting/"/>
    
  </entry>
  
  <entry>
    <title>在Linode上的Ubuntu12.04中搭建Hexo</title>
    <link href="http://www.fwhyy.com/2016/09/Build-Ubuntu12-04-in-Linode-on-Hexo/"/>
    <id>http://www.fwhyy.com/2016/09/Build-Ubuntu12-04-in-Linode-on-Hexo/</id>
    <published>2016-09-01T22:42:53.000Z</published>
    <updated>2016-09-01T22:52:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从接触了Markdown后就喜欢上了，写博客自然也就想使用Markdown，但Wordpress中的Markdown插件都不怎么好用。找了很久终于找了一个在当时感觉还不错的方法，使用马克飞象写然后导出成Html在Wordpress的后台进行发布，具体参见《<a href="http://fwhyy.com/2015/06/use-markdown-in-wordpress/" target="_blank" rel="external">WordPress使用Markdown</a>》。虽然效果还不错但操作起来比较繁琐，所以经过一番折腾，使用Hexo代替了Wordpress，本文主要讲下怎样在Linode中搭建Hexo。</p>
<p>如果您还不知道Linode和Hexo是什么，自行Google之，本文不做介绍。</p>
<p>2015年初在Linode购买了VPS，机房自然选择了亚洲的东京机房。安装的Ubuntu12.04的操作系统，因为对Linx系统不熟，选择了最省事的<a href="http://lnmp.org/" target="_blank" rel="external">lnmp</a> 。lnmp中自带nginx，所以Hexo的部署也就使用nginx做为服务器。</p>
<h2 id="服务器安装Nodejs"><a href="#服务器安装Nodejs" class="headerlink" title="服务器安装Nodejs"></a>服务器安装Nodejs</h2><p>Hexo是使用Nodejs写的，运行Hexo需要Nodejs环境，安装最新版Nodejs执行如下命令：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apt-get update  </div><div class="line">apt-get install -y python-software-properties software-properties-common  <span class="built_in"></span></div><div class="line">add-apt-repository ppa:chris-lea/node.js  </div><div class="line">apt-get update  </div><div class="line">apt-get install nodejs</div></pre></td></tr></table></figure>
<h2 id="服务器安装Git"><a href="#服务器安装Git" class="headerlink" title="服务器安装Git"></a>服务器安装Git</h2><p>Git是用来在服务端配置Git Hook，以便在客户端可以实现文章一键发布。Git安装命令如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install git</div></pre></td></tr></table></figure>
<h3 id="添加git账户"><a href="#添加git账户" class="headerlink" title="添加git账户"></a>添加git账户</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">sudo</span> <span class="keyword">adduser </span>git</div></pre></td></tr></table></figure>
<h3 id="公钥绑定"><a href="#公钥绑定" class="headerlink" title="公钥绑定"></a>公钥绑定</h3><p>在本地使用git命令创建公钥，我使用的是Mac，公钥的路径为<code>~/.ssh/id_rsa.pub</code>，将公钥的内容添加到服务器上的<code>/home/git/.ssh/authorized_keys</code>文件中。关于生成公钥文件<code>id_rsa.pub</code>可以<a href="http://my.oschina.net/gal/blog/141442" target="_blank" rel="external">参考</a></p>
<h3 id="服务器端创建Git仓库"><a href="#服务器端创建Git仓库" class="headerlink" title="服务器端创建Git仓库"></a>服务器端创建Git仓库</h3><p>服务端端Git仓库目录为<code>/var/repo/hexoblog.git</code>，先创建目录，然后使用Git命令来初始化库，代码如下：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo <span class="keyword">mkdir</span> /<span class="keyword">var</span>/repo</div><div class="line">$ <span class="keyword">cd</span> /<span class="keyword">var</span>/repo</div><div class="line">$ sudo git init --bare hexoblog.git</div></pre></td></tr></table></figure>
<h3 id="配置Git-Hook"><a href="#配置Git-Hook" class="headerlink" title="配置Git Hook"></a>配置Git Hook</h3><p>Git Hook简单理解就是当代码Push到服务器上后会自动执行一个自定义的脚本，详细请<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="external">参考</a></p>
<p>在这里要使用的是post-receive，post-receive的详细解释：</p>
<blockquote>
<p>post-receive 挂钩在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。 它接受与 pre-receive 相同的标准输入数据。 它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器，或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。 该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态，所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间。</p>
</blockquote>
<p>在上面创建的hexoblog.git目录中创建post-receive文件，代码如下：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">cd</span> /<span class="keyword">var</span>/repo/hexoblog.git/hooks</div><div class="line">$ vim <span class="keyword">post</span>-receive</div></pre></td></tr></table></figure>
<p>post-receive文件的内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/bash -l</span></div><div class="line">GIT_REPO=/var/repo/hexoblog.git</div><div class="line">TMP_GIT_CLONE=/var/tmp/hexoblog</div><div class="line">PUBLIC_WWW=/home/wwwroot/home.fwhyy.com</div><div class="line">rm -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></div><div class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></div><div class="line">rm -rf <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/*</div><div class="line">cp -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="variable">$&#123;PUBLIC_WWW&#125;</span></div></pre></td></tr></table></figure>
<p>上面的代码有对服务器目录的写操作，需要给相关的权限才能正常写入：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod <span class="number">777</span> home<span class="selector-class">.fwhyy</span><span class="selector-class">.com</span></div></pre></td></tr></table></figure>
<p>关于权限详细参考：<a href="http://blog.csdn.net/mzy202/article/details/7178586" target="_blank" rel="external">http://blog.csdn.net/mzy202/article/details/7178586</a></p>
<h2 id="创建虚拟主机"><a href="#创建虚拟主机" class="headerlink" title="创建虚拟主机"></a>创建虚拟主机</h2><p>lnmp创建的配置文件路径为：<code>/usr/local/nginx/conf/vhost</code><br>在该路径下创建文件<code>home.fwhyy.com.conf</code>，该文件内容如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;                                                                               </div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span> ;                                                                                               </div><div class="line">    <span class="attribute">root</span> /home/wwwroot/home.fwhyy.com;                                                        </div><div class="line">    <span class="attribute">server_name</span> home.fwhyy.com;                                                 </div><div class="line">    <span class="attribute">access_log</span>  /var/log/nginx/blog_access.log;                                    </div><div class="line">    <span class="attribute">error_log</span>   /var/log/nginx/blog_error.log;                                            </div><div class="line">    <span class="attribute">location</span> <span class="regexp">~* ^.+\.(ico|gif|jpg|jpeg|png)$</span> &#123;                            </div><div class="line">            <span class="attribute">root</span> /home/wwwroot/home.fwhyy.com;                                    </div><div class="line">            <span class="attribute">access_log</span>   <span class="literal">off</span>;                 </div><div class="line">            <span class="attribute">expires</span>      <span class="number">1d</span>;                            </div><div class="line">        &#125;                                                                              </div><div class="line">    <span class="attribute">location</span> <span class="regexp">~* ^.+\.(css|js|txt|xml|swf|wav)$</span> &#123;                                   </div><div class="line">        <span class="attribute">root</span> /home/wwwroot/home.fwhyy.com;                                                        </div><div class="line">        <span class="attribute">access_log</span>   <span class="literal">off</span>;                                                          </div><div class="line">        <span class="attribute">expires</span>      <span class="number">10m</span>;                                                          </div><div class="line">    &#125;                                                                              </div><div class="line">    <span class="attribute">location</span> / &#123;                                                                   </div><div class="line">        <span class="attribute">root</span> /home/wwwroot/home.fwhyy.com;                                                </div><div class="line">        <span class="attribute">if</span> (-f <span class="variable">$request_filename</span>) &#123;                                            </div><div class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span>  /<span class="variable">$1</span> <span class="literal">break</span>;                                    </div><div class="line">        &#125;                                                                      </div><div class="line">    &#125;                                                                              </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="重启lnmp"><a href="#重启lnmp" class="headerlink" title="重启lnmp"></a>重启lnmp</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta-keyword">/root/</span>lnmp restart</div></pre></td></tr></table></figure>
<h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><ol>
<li>安装Nodejs</li>
<li>安装Hexo</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div></pre></td></tr></table></figure>
<ol>
<li>Hexo根目录下的_config.yml文件的配置如下：</li>
</ol>
<p><img src="http://oec2003.qiniudn.com/14727700421219.jpg" alt=""></p>
<p>repo格式：git@服务器IP:服务器git库地址</p>
<h2 id="写博客流程"><a href="#写博客流程" class="headerlink" title="写博客流程"></a>写博客流程</h2><ol>
<li>在iTerm中使用<code>hexo n &#39;new post name&#39;</code>来创建一篇博客；</li>
<li>使用<a href="http://zh.mweb.im/" target="_blank" rel="external">MWeb</a>外部文档进行博客的编写，关于MWeb后面会单独开篇来介绍；</li>
<li>在iTerm中使用<code>hexo g</code>来生成博客；</li>
<li>在iTerm中使用<code>hexo s</code>来启动服务，可以在本地使用<a href="http://localhost:4000预览博客；" target="_blank" rel="external">http://localhost:4000预览博客；</a></li>
<li>在iTerm中使用<code>hexo d</code>部署到服务器。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/" target="_blank" rel="external">http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/</a><br><a href="http://www.baseproapp.com/2016/02/01/%E5%9C%A8VPS%E4%B8%8A%E9%85%8D%E7%BD%AEhexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">http://www.baseproapp.com/2016/02/01/%E5%9C%A8VPS%E4%B8%8A%E9%85%8D%E7%BD%AEhexo%E5%8D%9A%E5%AE%A2/</a><br><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a><br><a href="http://blog.csdn.net/mzy202/article/details/7178586" target="_blank" rel="external">http://blog.csdn.net/mzy202/article/details/7178586</a><br><a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="external">https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从接触了Markdown后就喜欢上了，写博客自然也就想使用Markdown，但Wordpress中的Markdown插件都不怎么好用。找了很久终于找了一个在当时感觉还不错的方法，使用马克飞象写然后导出成Html在Wordpress的后台进行发布，具体参见《&lt;a href=
    
    </summary>
    
      <category term="Hexo" scheme="http://www.fwhyy.com/categories/Hexo/"/>
    
    
      <category term="Linode" scheme="http://www.fwhyy.com/tags/Linode/"/>
    
      <category term="Hexo" scheme="http://www.fwhyy.com/tags/Hexo/"/>
    
      <category term="Ubuntu" scheme="http://www.fwhyy.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>C# 带签名dll破解</title>
    <link href="http://www.fwhyy.com/2016/03/csharp-with-signature-dll-crack/"/>
    <id>http://www.fwhyy.com/2016/03/csharp-with-signature-dll-crack/</id>
    <published>2016-03-08T16:00:00.000Z</published>
    <updated>2016-09-01T05:39:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先申明，本文只是从技术的角度来分析下怎样破解带签名的C#写的dll文件。大家如有遇到收费的软件或类库还是应该去购买正版，程序员何苦为难程序员呢。</p>
<h2 id="不带签名的破解"><a href="#不带签名的破解" class="headerlink" title="不带签名的破解"></a>不带签名的破解</h2><p>不带签名的dll文件的破解很简单，通常有下面三个步骤：</p>
<ol>
<li>使用反编译工具对dll文件进行反编译，找到校验过期的相关代码，反编译工具可以使用ILSpy或Reflector;</li>
<li>使用ildasm.exe工具将dll导出成il文本文件，在该文件中找到相关的代码进行修改；</li>
<li>使用ildasm.exe工具将修改后的il文件编译成dll文件。</li>
</ol>
<p>下面看一个例子，假设有ClassLibrary1.dll文件，该类库中的有关校验过期的代码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">License</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> licenseExpired;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CheckLicense</span>(<span class="params"></span>)</span></div><div class="line">   &#123;</div><div class="line">       <span class="comment">//if语句中判断是否过期</span></div><div class="line">       <span class="keyword">if</span>(<span class="literal">true</span>)</div><div class="line">       &#123;</div><div class="line">           <span class="comment">//标示是否过期，设置成true表示过期</span></div><div class="line">           License.licenseExpired = <span class="literal">true</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用ILSpy进行反编译看到的代码如下:</p>
<p><img src="http://oec2003.qiniudn.com/wpid-14574474852300.jpg" alt="wpid-14574474852300"></p>
<p>现在使用ildasm.exe对该dll文件进行导出成il文本文件:</p>
<p><img src="http://oec2003.qiniudn.com/wpid-14574476388347.jpg" alt="wpid-14574476388347"></p>
<p>使用文本编辑器打开il文件，找到校验对相关代码：</p>
<p><img src="http://oec2003.qiniudn.com/wpid-14574478634829.jpg" alt="wpid-14574478634829"></p>
<ol>
<li>上图中的红框部分代码对应的就是License.licenseExpired = true;这行代码；</li>
<li>第97行代码IL_0004:ldc.i4.1代表的就是true，等待着赋值给下面的licenseExpired；</li>
<li>修改97行的代码为IL_0004:ldc.i4.0，然后保存il文件。</li>
</ol>
<p>打开命令行，进入到il文件所在到目录，执行下面的命令；</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c:<span class="symbol">\w</span>indows<span class="symbol">\m</span>icrosoft.net<span class="symbol">\f</span>ramework<span class="symbol">\v</span>4.0.30319<span class="symbol">\i</span>lasm.exe /dll/resource=ClassLibrary1.res ClassLibrary1.il</div></pre></td></tr></table></figure>
<p><img src="http://oec2003.qiniudn.com/wpid-14574490215799.jpg" alt="wpid-14574490215799"></p>
<p>现在在il文件的目录中可以看到生成的dll文件：</p>
<p><img src="http://oec2003.qiniudn.com/wpid-14574491293072.jpg" alt="wpid-14574491293072"></p>
<p>反编译生成的dll文件，可以看出代码已经被修改，如下图：</p>
<p><img src="http://oec2003.qiniudn.com/wpid-14574491097269.jpg" alt="wpid-14574491097269"></p>
<h2 id="带签名dll的破解"><a href="#带签名dll的破解" class="headerlink" title="带签名dll的破解"></a>带签名dll的破解</h2><p>如果程序集是带签名的程序集，在经过上面的步骤进行破解后，dll文件依然不能正常使用，通常会报如下错误：</p>
<blockquote>
<p>未能加载文件或程序集“ClassLibrary1”或它的某一个依赖项。未能验证强名称签名。此程序集可能已被篡改，或者已被延迟签名，但没有用正确的私钥进行完全签名。 (异常来自 &gt;HRESULT:0x80131045)</p>
</blockquote>
<p>经过对比发现经过签名的dll文件和未签名的dll文件的区别在于签名的dll文件生成的il代码中会多处如下的代码：</p>
<p><img src="http://oec2003.qiniudn.com/wpid-14574511220078.jpg" alt="wpid-14574511220078"></p>
<p>将il代码中上面红框部分代码删除，重新生成的dll文件就是去掉了签名的dll文件。不出什么意外的话此时的dll文件可以正常使用了，但有时又会出现如下的错误：</p>
<blockquote>
<p>重写成员“xxx”时违反了继承安全性规则。重写方法的安全可访问性必须与所重写方法的安全可访问性匹配</p>
</blockquote>
<p>解决该问题需要在Assemblyinfo.cs文件中添加如下代码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[assembly: System<span class="selector-class">.Security</span><span class="selector-class">.SecurityRules</span>(System<span class="selector-class">.Security</span><span class="selector-class">.SecurityRuleSet</span><span class="selector-class">.Level1</span>)]</div></pre></td></tr></table></figure>
<p><img src="http://oec2003.qiniudn.com/wpid-14574514129726.jpg" alt="wpid-14574514129726"></p>
<p>上面添加的代码对应的il代码为：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.custom</span><span class="built_in"> instance </span>void [mscorlib]System.Security.SecurityRulesAttribute::.ctor(valuetype [mscorlib]System.Security.SecurityRuleSet) = ( 01 00 01 00 00 )</div></pre></td></tr></table></figure>
<p>将上面的代码添加到il的相应位置，重新生成dll文件就OK了。</p>
<p>总结</p>
<p>本文是以技术研究学习为目的，不提倡对收费的软件或类库进行破解使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先申明，本文只是从技术的角度来分析下怎样破解带签名的C#写的dll文件。大家如有遇到收费的软件或类库还是应该去购买正版，程序员何苦为难程序员呢。&lt;/p&gt;
&lt;h2 id=&quot;不带签名的破解&quot;&gt;&lt;a href=&quot;#不带签名的破解&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="C#" scheme="http://www.fwhyy.com/categories/C/"/>
    
    
      <category term="C#" scheme="http://www.fwhyy.com/tags/C/"/>
    
      <category term="ildasm" scheme="http://www.fwhyy.com/tags/ildasm/"/>
    
      <category term="破解" scheme="http://www.fwhyy.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>OWA实现Word在线编辑（以GridFs存储文件）</title>
    <link href="http://www.fwhyy.com/2016/01/word-owa-online-editor-from-gridfs/"/>
    <id>http://www.fwhyy.com/2016/01/word-owa-online-editor-from-gridfs/</id>
    <published>2016-01-25T16:00:00.000Z</published>
    <updated>2016-08-31T15:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>OWA全称Office Web App，是用来做Office文档预览的一个很好的工具，通过一些配置文件的设置还可以实现Excel、PowerPoint的在线编辑功能，但对Word在线编辑并不支持。GitHub上有大牛实现了Word的在线编辑，不过文件必须是物理文件，本文在此基础上做了些扩展可以支持文件存储在分布式文件系统中，本文以GridFs为例。</p>
<h2 id="WopiHost"><a href="#WopiHost" class="headerlink" title="WopiHost"></a>WopiHost</h2><p>WopiHost是GitHub上大牛实现的使用OWA进行Word在线编辑的开源程序，代码地址<a href="https://github.com/marx-yu/WopiHost.git" target="_blank" rel="external">https://github.com/marx-yu/WopiHost.git</a>，该程序的代码结构如下图：</p>
<p><img src="http://oec2003.qiniudn.com/wpid-14538187926396.jpg" alt="wpid-14538187926396"></p>
<p>使用该程序需要注意的几个地方：</p>
<ul>
<li>该程序依赖Microsoft.CobaltCore.dll ，这个dll在安装有OWA的服务器上可以找到，我已经将此dll文件放在项目中的Lib目录中；</li>
<li>该程序是一个控制台程序，启动后会是一个http服务，并监听一个特定端口；</li>
<li>基本只需关注Program类和CobaltServer两个类就可以了；</li>
</ul>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>要实现跟分布式文件系统的集成，需要三步：</p>
<ul>
<li>从分布式文件保存文件到服务器的某个目录中；</li>
<li>OWA加载该文件；</li>
<li>修改文件，点击保存后文件需要存储到分布式文件系统中。</li>
</ul>
<p>开始准备研究WopiHost的代码，并对代码进行修改来支持分布式文件系统，发现实现起来有些困难。原始的WopiHost使用方法如下：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span>/<span class="regexp">/192.168.16.98/we</span><span class="regexp">/wordeditorframe.aspx?WOPISrc=http:/</span><span class="regexp">/localhost:9111/wopi</span><span class="regexp">/files/</span><span class="number">1</span>.docx&amp;amp;access_token=<span class="number">111</span></div></pre></td></tr></table></figure>
<p>上面的地址中1.docx 是需要编辑文件的文件名，根据该文件名在特定目录中去加载文件，如果换成分布式文件系统，1.docx 的地方应该是一个文件Id，如下：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span>/<span class="regexp">/192.168.16.98/we</span><span class="regexp">/wordeditorframe.aspx?WOPISrc=http:/</span><span class="regexp">/localhost:9111/wopi</span><span class="regexp">/files/</span><span class="number">56</span>a6eda2c6a76910844dfe25&amp;amp;access_token=<span class="number">111</span></div></pre></td></tr></table></figure>
<p>换成Id后文件可以正确加载并保存，但因为GridFs不支持文件的更新操作，如果要更新一个文件需要先删除再添加，新添加的文件的FileId会发生变化，这样就会导致保存后页面加载的还是保存前的文件。</p>
<p>而且WopiHost对Word、Excel等不同类型的处理方式还不一样，即便上面遇到的问题能够解决，整个代码修改来也很复杂，所以需要转变思路，将上面提到的三个步骤分开来做：</p>
<ul>
<li>签出文件，该步骤将GridFs中的文件保存到服务器目录中；</li>
<li>编辑文件，该步骤可以使用WopiHost的原始功能，代码不用做任何修改；</li>
<li>签入文件，该步骤将目录中的文件保存到GridFs中。</li>
</ul>
<p>因为WopiHost不支持一个文件同时多人编辑，所以在代码层面可以做一些独占式的控制，如一个用户将文件签出了，其他用户就不能签出，必须等编辑完签入后才能再签出编辑。</p>
<h2 id="OWAEditorWeb"><a href="#OWAEditorWeb" class="headerlink" title="OWAEditorWeb"></a>OWAEditorWeb</h2><p>一个简单的Asp.Net示例，代码地址：<a href="https://github.com/oec2003/OWAEditorSample.git" target="_blank" rel="external">https://github.com/oec2003/OWAEditorSample.git</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OWA全称Office Web App，是用来做Office文档预览的一个很好的工具，通过一些配置文件的设置还可以实现Excel、PowerPoint的在线编辑功能，但对Word在线编辑并不支持。GitHub上有大牛实现了Word的在线编辑，不过文件必须是物理文件，本文在此
    
    </summary>
    
      <category term="Office Web App" scheme="http://www.fwhyy.com/categories/Office-Web-App/"/>
    
    
      <category term="GridFS" scheme="http://www.fwhyy.com/tags/GridFS/"/>
    
      <category term="OWA" scheme="http://www.fwhyy.com/tags/OWA/"/>
    
  </entry>
  
  <entry>
    <title>Angularjs跨域调用Asp.Net WebAPI</title>
    <link href="http://www.fwhyy.com/2016/01/angularjs-cross-domain-call-webapi-asp-net/"/>
    <id>http://www.fwhyy.com/2016/01/angularjs-cross-domain-call-webapi-asp-net/</id>
    <published>2016-01-05T16:00:00.000Z</published>
    <updated>2016-09-02T01:22:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一篇使用jQuery跨域调用WebAPI的博客《<a href="http://blog.fwhyy.com/2015/08/jquery-cros-access-asp-net-web-api/" target="_blank" rel="external">jQuery跨域调用Asp.Net Web API</a>》,但最近使用Angularjs来调用WebAPI发现之前的方法行不通。本文主要介绍解决使用Angularjs调用WebAPI的跨域问题。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Angularjs1.4.7</li>
<li>Asp.Net WebAPI2</li>
<li>IIS：IIS8.0</li>
<li>VS：VS2013</li>
<li>.Net Framework：4.5</li>
</ul>
<h2 id="服务端跨域实现"><a href="#服务端跨域实现" class="headerlink" title="服务端跨域实现"></a>服务端跨域实现</h2><p>这里的服务端指的是Asp.Net WebAPI,根据最近查过的些资料，大概有三种实现方式：</p>
<p>方式一： 使用《<a href="http://blog.fwhyy.com/2015/08/jquery-cros-access-asp-net-web-api/" target="_blank" rel="external">在jQuery跨域调用Asp.Net Web API</a>》一文中介绍的方式；</p>
<p>方式二： 使用自定义的Attribute，代码如下：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrossSiteAttribute</span> : <span class="title">System</span>.<span class="title">Web</span>.<span class="title">Http</span>.<span class="title">Filters</span>.<span class="title">ActionFilterAttribute</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> Origin = <span class="string">"Origin"</span>;</div><div class="line">    <span class="comment">/// &lt;summary&gt;</span></div><div class="line">    <span class="comment">/// Access-Control-Allow-Origin是HTML5中定义的一种服务器端返回Response header，用来解决资源（比如字体）的跨域权限问题。</span></div><div class="line">    <span class="comment">/// &lt;/summary&gt;</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> AccessControlAllowOrigin = <span class="string">"Access-Control-Allow-Origin"</span>;</div><div class="line">    <span class="comment">/// &lt;summary&gt;</span></div><div class="line">    <span class="comment">///  originHeaderdefault的值可以使 URL 或 *，如果是 URL 则只会允许来自该 URL 的请求，* 则允许任何域的请求</span></div><div class="line">    <span class="comment">/// &lt;/summary&gt;</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> originHeaderdefault = <span class="string">"*"</span>;</div><div class="line">    <span class="comment">/// &lt;summary&gt;</span></div><div class="line">    <span class="comment">/// 该方法允许api支持跨域调用</span></div><div class="line">    <span class="comment">/// &lt;/summary&gt;</span></div><div class="line">    <span class="comment">/// &lt;param name="actionExecutedContext"&gt; 初始化 System.Web.Http.Filters.HttpActionExecutedContext 类的新实例。&lt;/param&gt;</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> OnActionExecuted(HttpActionExecutedContext actionExecutedContext)</div><div class="line">    &#123;</div><div class="line">        actionExecutedContext.Response.Headers.Add(AccessControlAllowOrigin, originHeaderdefault);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方式三： 另一种自定义的Attribute，代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsPolicyProvider</span> : <span class="type">Attribute</span>, <span class="type">ICorsPolicyProvider</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> CorsPolicy _policy;</div><div class="line">    <span class="keyword">public</span> CorsPolicyProvider()</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Create a CORS policy.</span></div><div class="line">        _policy = new CorsPolicy</div><div class="line">        &#123;</div><div class="line">            AllowAnyMethod = <span class="literal">true</span>,</div><div class="line">            AllowAnyHeader = <span class="literal">true</span>,</div><div class="line">            AllowAnyOrigin = <span class="literal">true</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// Magic line right here</span></div><div class="line">        _policy.Origins.Add(<span class="string">"*"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Task&lt;CorsPolicy&gt; GetCorsPolicyAsync(HttpRequestMessage request, </div><div class="line">        CancellationToken cancellationToken)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Task.FromResult(_policy);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果是普通的js或jQuery跨域调用，服务端进行上面的设置基本就可以了，但在Angularjs中，还是无法成功调用，通常会报下面的错误:</p>
<p><img src="http://oec2003.qiniudn.com/wpid-14520930264098.jpg" alt="wpid-14520930264098"></p>
<h2 id="Angularjs中的设置"><a href="#Angularjs中的设置" class="headerlink" title="Angularjs中的设置"></a>Angularjs中的设置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</div><div class="line">app.config([<span class="string">'$httpProvider'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$httpProvider</span>) </span>&#123;</div><div class="line">       <span class="comment">// Use x-www-form-urlencoded Content-Type</span></div><div class="line">       $httpProvider.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span>;</div><div class="line"></div><div class="line">       <span class="comment">// Override $http service's default transformRequest</span></div><div class="line">       $httpProvider.defaults.transformRequest = [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">           <span class="comment">/**</span></div><div class="line">            * The workhorse; converts an object to x-www-form-urlencoded serialization.</div><div class="line">            * @param &#123;Object&#125; obj</div><div class="line">            * @return &#123;String&#125;</div><div class="line">            */</div><div class="line">           <span class="keyword">var</span> param = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">               <span class="keyword">var</span> query = <span class="string">''</span>;</div><div class="line">               <span class="keyword">var</span> name, value, fullSubName, subName, subValue, innerObj, i;</div><div class="line"></div><div class="line">               <span class="keyword">for</span> (name <span class="keyword">in</span> obj) &#123;</div><div class="line">                   value = obj[name];</div><div class="line"></div><div class="line">                   <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">                       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; value.length; ++i) &#123;</div><div class="line">                           subValue = value[i];</div><div class="line">                           fullSubName = name + <span class="string">'['</span> + i + <span class="string">']'</span>;</div><div class="line">                           innerObj = &#123;&#125;;</div><div class="line">                           innerObj[fullSubName] = subValue;</div><div class="line">                           query += param(innerObj) + <span class="string">'&amp;'</span>;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</div><div class="line">                       <span class="keyword">for</span> (subName <span class="keyword">in</span> value) &#123;</div><div class="line">                           subValue = value[subName];</div><div class="line">                           fullSubName = name + <span class="string">'['</span> + subName + <span class="string">']'</span>;</div><div class="line">                           innerObj = &#123;&#125;;</div><div class="line">                           innerObj[fullSubName] = subValue;</div><div class="line">                           query += param(innerObj) + <span class="string">'&amp;'</span>;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (value !== <span class="literal">undefined</span> &amp;&amp; value !== <span class="literal">null</span>) &#123;</div><div class="line">                       query += <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value) + <span class="string">'&amp;'</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="keyword">return</span> query.length ? query.substr(<span class="number">0</span>, query.length - <span class="number">1</span>) : query;</div><div class="line">           &#125;;</div><div class="line"></div><div class="line">           <span class="keyword">return</span> angular.isObject(data) &amp;&amp; <span class="built_in">String</span>(data) !== <span class="string">'[object File]'</span> ? param(data) : data;</div><div class="line">       &#125;];</div><div class="line">   &#125;]);</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.codeproject.com/Articles/742532/Using-Web-API-Individual-User-Account-plus-CORS-En" target="_blank" rel="external">http://www.codeproject.com/Articles/742532/Using-Web-API-Individual-User-Account-plus-CORS-En</a><br><a href="http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api" target="_blank" rel="external">http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写过一篇使用jQuery跨域调用WebAPI的博客《&lt;a href=&quot;http://blog.fwhyy.com/2015/08/jquery-cros-access-asp-net-web-api/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQ
    
    </summary>
    
      <category term="Angularjs" scheme="http://www.fwhyy.com/categories/Angularjs/"/>
    
    
      <category term="AngularJS" scheme="http://www.fwhyy.com/tags/AngularJS/"/>
    
      <category term="WebAPI" scheme="http://www.fwhyy.com/tags/WebAPI/"/>
    
  </entry>
  
  <entry>
    <title>Asp.Net WebAPI 视频秒播</title>
    <link href="http://www.fwhyy.com/2015/12/aspnet-webapi-shi-pin-miao-bo/"/>
    <id>http://www.fwhyy.com/2015/12/aspnet-webapi-shi-pin-miao-bo/</id>
    <published>2015-12-11T16:00:00.000Z</published>
    <updated>2016-08-31T15:28:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>看标题知道本文是关于WebAPI和视频播放的，关于在Web上使用的视频播放插件有很多，像flowplayer、jdplayer等等。使用这些控件通常使用服务器上物理文件的相对路径或是一个API地址返回一个视频流。通常情况下视频播放控件会将视频流全部加载后才开始播放，当视频文件较大时，这个等待时间是不能接受的，本文主要介绍怎样实现秒播。</p>
<h2 id="涉及知识点"><a href="#涉及知识点" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><ul>
<li>Asp.Net WebAPI</li>
<li>Html5</li>
<li>HTTP 206</li>
<li>Content-Range</li>
</ul>
<h2 id="WebAPI实现"><a href="#WebAPI实现" class="headerlink" title="WebAPI实现"></a>WebAPI实现</h2><p><a href="https://gist.github.com/oec2003/85f4a3fbfdf675674ee3" target="_blank" rel="external">https://gist.github.com/oec2003/85f4a3fbfdf675674ee3</a></p>
<h2 id="HTML5调用"><a href="#HTML5调用" class="headerlink" title="HTML5调用"></a>HTML5调用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"mainPlayer"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"360"</span> </span></div><div class="line">        <span class="attr">autoplay</span>=<span class="string">"autoplay"</span> <span class="attr">controls</span>=<span class="string">"controls"</span> <span class="attr">onloadeddata</span>=<span class="string">"onLoad()"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"http://10.104.15.10:8010/api/file/media/play/5656b988cbcbb513b8900b88"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.codeproject.com/Articles/820146/HTTP-Partial-Content-In-ASP-NET-Web-API-Video" target="_blank" rel="external">http://www.codeproject.com/Articles/820146/HTTP-Partial-Content-In-ASP-NET-Web-API-Video</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看标题知道本文是关于WebAPI和视频播放的，关于在Web上使用的视频播放插件有很多，像flowplayer、jdplayer等等。使用这些控件通常使用服务器上物理文件的相对路径或是一个API地址返回一个视频流。通常情况下视频播放控件会将视频流全部加载后才开始播放，当视频文
    
    </summary>
    
      <category term="Asp.Net MVC" scheme="http://www.fwhyy.com/categories/Asp-Net-MVC/"/>
    
    
      <category term="WebAPI" scheme="http://www.fwhyy.com/tags/WebAPI/"/>
    
  </entry>
  
  <entry>
    <title>使用fancybox</title>
    <link href="http://www.fwhyy.com/2015/12/use-fancybox/"/>
    <id>http://www.fwhyy.com/2015/12/use-fancybox/</id>
    <published>2015-12-01T16:00:00.000Z</published>
    <updated>2016-09-21T15:37:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>fancybox是一款不错的展示图片的jQuery插件，就目前在网上查到的资料大体有1.x和2.x两个大大版本，两个版本的用法有不少的差别，本文主要介绍的是2.1.5版本的使用。</p>
<h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>fancybox功能很多，也有很多的插件，本文主要实现以下功能：</p>
<ul>
<li>多图片切换</li>
<li>显示总图片数和当前浏览的图片索引数</li>
<li>图片标题可以点击，跳转到新的页面打开图片</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="脚本样式引用"><a href="#脚本样式引用" class="headerlink" title="脚本样式引用"></a>脚本样式引用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"fancybox/jquery.fancybox.css"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.8.2.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"fancybox/jquery.fancybox.pack.js?v=1"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>1、图片标题内嵌，并且可以点击 2、显示总图片数和当前数<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"fancybox"</span> <span class="attr">rel</span>=<span class="string">"group"</span> <span class="attr">data-fancybox-group</span>=<span class="string">"button"</span> <span class="attr">href</span>=<span class="string">"http://ww3.sinaimg.cn/mw690/3cefded1gw1eyl1p21s81j20xa0mctjo.jpg"</span> <span class="attr">title</span>=<span class="string">"在桂林1"</span>&gt;</span></div><div class="line">            </div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://ww3.sinaimg.cn/mw690/3cefded1gw1eyl1p21s81j20xa0mctjo.jpg"</span>  <span class="attr">style</span>=<span class="string">"width:100px;height:80px"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"fancybox"</span> <span class="attr">rel</span>=<span class="string">"group"</span> <span class="attr">data-fancybox-group</span>=<span class="string">"button"</span> <span class="attr">href</span>=<span class="string">"http://ww2.sinaimg.cn/mw690/3cefded1gw1eyl1y8955tj20xa0lyq9q.jpg"</span> <span class="attr">title</span>=<span class="string">"在桂林2"</span>&gt;</span></div><div class="line">            </div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://ww2.sinaimg.cn/mw690/3cefded1gw1eyl1y8955tj20xa0lyq9q.jpg"</span>  <span class="attr">style</span>=<span class="string">"width:100px;height:80px"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Javascript代码"><a href="#Javascript代码" class="headerlink" title="Javascript代码"></a>Javascript代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        </div><div class="line">        $(<span class="string">".fancybox"</span>).attr(<span class="string">'rel'</span>, <span class="string">'gallery'</span>).fancybox(&#123;</div><div class="line">          <span class="comment">//设置相应事件（左边从上到下依次是打开、关闭、下一个、上一个）的动画效果。可选 'elastic'、 'fade' 或 'none'。</span></div><div class="line">          openEffect  : <span class="string">'elastic'</span>,</div><div class="line">          closeEffect : <span class="string">'elastic'</span>, </div><div class="line">          nextEffect :<span class="string">'elastic'</span>,</div><div class="line">          prevEffect:<span class="string">'elastic'</span>,</div><div class="line">          maxWidth:<span class="number">1280</span>,</div><div class="line">          helpers:&#123;</div><div class="line">            <span class="comment">//图片标题的显示方式</span></div><div class="line">            title: &#123; type:<span class="string">'inside'</span> &#125; ,</div><div class="line">             overlay : &#123;</div><div class="line">                css : &#123;</div><div class="line">                    <span class="string">'background'</span> : <span class="string">'rgba(39,40,34,0.7)'</span> <span class="comment">//添加遮罩</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;,</div><div class="line">          beforeShow : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.title =<span class="string">' &lt;a target="_blank" href="'</span>+<span class="keyword">this</span>.href+<span class="string">'"&gt;'</span>+(<span class="keyword">this</span>.title ? <span class="string">''</span> + <span class="keyword">this</span>.title + <span class="string">''</span> : <span class="string">''</span>)+<span class="string">'&lt;/a&gt;  '</span>+ (<span class="keyword">this</span>.index + <span class="number">1</span>) + <span class="string">'/'</span> + <span class="keyword">this</span>.group.length;</div><div class="line">           &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.xufukun.com/tools/fancybox2/" target="_blank" rel="external">http://www.xufukun.com/tools/fancybox2/</a><br><a href="http://www.cnblogs.com/mumutouv/p/4267408.html" target="_blank" rel="external">http://www.cnblogs.com/mumutouv/p/4267408.html</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>fancybox还有许多的其它功能，后面再慢慢来实现，本文的例子已上传到了github上，地址：<a href="https://github.com/oec2003/fancyboxdemo.git" target="_blank" rel="external">https://github.com/oec2003/fancyboxdemo.git</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fancybox是一款不错的展示图片的jQuery插件，就目前在网上查到的资料大体有1.x和2.x两个大大版本，两个版本的用法有不少的差别，本文主要介绍的是2.1.5版本的使用。&lt;/p&gt;
&lt;h2 id=&quot;实现功能&quot;&gt;&lt;a href=&quot;#实现功能&quot; class=&quot;header
    
    </summary>
    
      <category term="JQuery" scheme="http://www.fwhyy.com/categories/JQuery/"/>
    
    
      <category term="javascript" scheme="http://www.fwhyy.com/tags/javascript/"/>
    
      <category term="JQuery" scheme="http://www.fwhyy.com/tags/JQuery/"/>
    
      <category term="fancybox" scheme="http://www.fwhyy.com/tags/fancybox/"/>
    
  </entry>
  
  <entry>
    <title>使用nw.js制作桌面应用程序</title>
    <link href="http://www.fwhyy.com/2015/10/use-nwjs-to-create-desktop-applications/"/>
    <id>http://www.fwhyy.com/2015/10/use-nwjs-to-create-desktop-applications/</id>
    <published>2015-10-21T16:00:00.000Z</published>
    <updated>2016-09-02T01:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在windows和mac下如果使用nw.js来制作桌面应用程序，以及如何制作成安装包，本文不涉及nw.js的开发，只是用nw.js做壳包一个web应用而已。</p>
<h2 id="一些参考链接"><a href="#一些参考链接" class="headerlink" title="一些参考链接"></a>一些参考链接</h2><ul>
<li><a href="http://nwjs.io/" target="_blank" rel="external">http://nwjs.io/</a></li>
<li><a href="https://github.com/nwjs/nw.js" target="_blank" rel="external">https://github.com/nwjs/nw.js</a></li>
<li><a href="https://github.com/nwjs/nw.js/wiki" target="_blank" rel="external">https://github.com/nwjs/nw.js/wiki</a></li>
<li><a href="http://www.cnblogs.com/xuanhun/tag/node.js/" target="_blank" rel="external">http://www.cnblogs.com/xuanhun/tag/node.js/</a></li>
<li><a href="http://blog.yorkgu.me/2015/05/12/how-to-make-dmg-files-in-mac-osx/" target="_blank" rel="external">http://blog.yorkgu.me/2015/05/12/how-to-make-dmg-files-in-mac-osx/</a></li>
<li><a href="https://github.com/nwjs/nw.js/wiki/manifest-format" target="_blank" rel="external">https://github.com/nwjs/nw.js/wiki/manifest-format</a></li>
<li><a href="https://github.com/nwjs/nw.js/wiki/Icons" target="_blank" rel="external">https://github.com/nwjs/nw.js/wiki/Icons</a></li>
<li><a href="http://www.angusj.com/resourcehacker/" target="_blank" rel="external">http://www.angusj.com/resourcehacker/</a></li>
</ul>
<h2 id="Windows版本"><a href="#Windows版本" class="headerlink" title="Windows版本"></a>Windows版本</h2><p>首先在<a href="http://nwjs.io/" target="_blank" rel="external">http://nwjs.io/</a> 上下载相应的Windows版本，解压到C盘根目录中，在该目录中添加Test目录，如下图：</p>
<p><img src="media/Snip20151021_4%20-1-.png" alt="Snip20151021_4 -1-"></p>
<p>在Test目录中添加如下文件：</p>
<p><img src="media/Snip20151021_5%20-1-.png" alt="Snip20151021_5 -1-"></p>
<ul>
<li>link.png：程序到图标文件</li>
<li>package.json：配置文件</li>
</ul>
<p>package.json的代码如下，详细配置信息参考<a href="https://github.com/nwjs/nw.js/wiki/manifest-format" target="_blank" rel="external">配置</a>：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"http://www.baidu.com"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"nwjs测试"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"nwjs测试"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"keywords"</span>: [ <span class="string">"nwjs测试"</span> ],</div><div class="line">  <span class="attr">"window"</span>: &#123;</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"nwjs测试"</span>,</div><div class="line">    <span class="attr">"icon"</span>: <span class="string">"link.png"</span>,</div><div class="line">    <span class="attr">"toolbar"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"frame"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"width"</span>: <span class="number">1000</span>,</div><div class="line">    <span class="attr">"height"</span>: <span class="number">680</span>,</div><div class="line">    <span class="attr">"position"</span>: <span class="string">"center"</span>,</div><div class="line">    <span class="attr">"min_width"</span>: <span class="number">1000</span>,</div><div class="line">    <span class="attr">"min_height"</span>: <span class="number">680</span>,</div><div class="line">    <span class="attr">"max_width"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"max_height"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"show_in_taskbar"</span>:<span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">"webkit"</span>: &#123;</div><div class="line">    <span class="attr">"plugin"</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在拖动Test目录到nw.exe文件上，程序就可以运行起来了：</p>
<p><img src="media/Snip20151021_6%20-1-.png" alt="Snip20151021_6 -1-"></p>
<p>效果如下：</p>
<p><img src="media/Snip20151021_7%20-1-.png" alt="Snip20151021_7 -1-"></p>
<p>接下来就要将程序打包成一个可以执行到exe文件了，进入到Test目录中，将目录中的所有文件压缩成Test.zip，将Test.zip移动到nw.exe的同级目录，打开命令行进入到该目录中，执行下面命令：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">copy</span> /b nw.exe+<span class="keyword">Test</span>.<span class="keyword">zip</span> <span class="keyword">Test</span>.exe</div></pre></td></tr></table></figure>
<p>命令执行成功后会在该目录中生成Test.exe文件，双击该文件便可打开程序，但如果将Test.exe复制到别的目录中，会发现不能正常运行了，因为Test.exe还依赖他同级目录中的一些dll文件，两种方式来处理这个问题：</p>
<ol>
<li>将依赖的dll文件和Test.exe打包成一个文件</li>
</ol>
<p>制作单一可执行程序可以使用Enigma Virtual Box，具体使用方法网上有很多教程，例如：</p>
<p><a href="http://sphrbeu2012.blog.163.com/blog/static/2092280742012518111358468/" target="_blank" rel="external">http://sphrbeu2012.blog.163.com/blog/static/2092280742012518111358468/</a></p>
<ol>
<li>制作一个安装程序</li>
</ol>
<p>制作安装程序可以使用inno，例如：</p>
<p><a href="http://www.cnblogs.com/way_testlife/archive/2011/04/08/2009528.html" target="_blank" rel="external">http://www.cnblogs.com/way_testlife/archive/2011/04/08/2009528.html</a></p>
<p>注意：</p>
<p>通过上面的命令生成的Test.exe文件的图标是nwjs的默认图标，可以通过<a href="http://www.angusj.com/resourcehacker/" target="_blank" rel="external">resourcehacker</a>来进行图标的修改。</p>
<h2 id="Mac版本"><a href="#Mac版本" class="headerlink" title="Mac版本"></a>Mac版本</h2><p>在<a href="http://nwjs.io/上下载合适的Mac版本，解压后放到根目录下，修改目录名称为nwjs-osx-32，如下图：" target="_blank" rel="external">http://nwjs.io/上下载合适的Mac版本，解压后放到根目录下，修改目录名称为nwjs-osx-32，如下图：</a></p>
<p><img src="media/Snip20151022_8%20-1-.png" alt="Snip20151022_8 -1-"></p>
<p>在终端中执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line"><span class="built_in">cd</span> ls <span class="_">-a</span></div></pre></td></tr></table></figure>
<p><img src="media/Snip20151022_9%20-1-.png" alt="Snip20151022_9 -1-"></p>
<p>如果发现有.bash_profile文件，输入vim .bash_profile命令对该文件进行编辑，添加如下代码后保存退出，关于vim命令的使用本文就不介绍了：</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span> <span class="title">nw</span>=<span class="string">"~/nwjs-osx-32/nwjs.app/Contents/MacOS/nwjs"</span></div></pre></td></tr></table></figure>
<p><img src="media/Snip20151022_10%20-1-.png" alt="Snip20151022_10 -1-"></p>
<p>修改完.bash_profile文件后，执行下面命令使修改能即时生效：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure>
<p>现在在终端中输入nw，如果出现下图界面说明配置成功：</p>
<p><img src="media/Snip20151022_13.png" alt="Snip20151022_13"></p>
<p>利用下面的命令在根目录中创建Test目录，并在Test目录中创建package.json文件：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> ~</div><div class="line"><span class="keyword">mkdir</span> <span class="keyword">Test</span></div><div class="line"><span class="keyword">cd</span> <span class="keyword">Test</span></div><div class="line">touch package.json</div></pre></td></tr></table></figure>
<p>package.json文件的内容如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"http://www.baidu.com"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"nwjs test"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"nwjs test"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"keywords"</span>: [ <span class="string">"nwjs test"</span> ],</div><div class="line">  <span class="attr">"window"</span>: &#123;</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"nwjs test"</span>,</div><div class="line">    <span class="attr">"icon"</span>: <span class="string">"link.png"</span>,</div><div class="line">    <span class="attr">"toolbar"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"frame"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"width"</span>: <span class="number">1000</span>,</div><div class="line">    <span class="attr">"height"</span>: <span class="number">680</span>,</div><div class="line">    <span class="attr">"position"</span>: <span class="string">"center"</span>,</div><div class="line">    <span class="attr">"min_width"</span>: <span class="number">1000</span>,</div><div class="line">    <span class="attr">"min_height"</span>: <span class="number">680</span>,</div><div class="line">    <span class="attr">"max_width"</span>: <span class="number">1000</span>,</div><div class="line">    <span class="attr">"max_height"</span>: <span class="number">680</span>,</div><div class="line">    <span class="attr">"show_in_taskbar"</span>:<span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">"webkit"</span>: &#123;</div><div class="line">    <span class="attr">"plugin"</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在根目录中输入命令nw Test ，如果出现下面截图说明运行成功：</p>
<p><img src="media/Snip20151022_14.png" alt="Snip20151022_14"></p>
<p>程序运行没有问题，接下来就要开始打包了，将~/nwjs-osx-32/nwjs.app 目录拷贝到根目录，并修改名字为test.app，可以在根目录下输入下面命令：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp -R ~/nwjs-osx-32/nwjs.<span class="keyword">app</span> ~/</div><div class="line">mv nwjs.<span class="keyword">app</span> <span class="keyword">test</span>.<span class="keyword">app</span></div></pre></td></tr></table></figure>
<p>打包项目文件Test到test.app/Contents/Resources/目录中，在Test目录中执行下面命令：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">zip</span> -r ../<span class="keyword">test</span>.<span class="keyword">app</span>/Contents/Resources/<span class="keyword">app</span>.nw *</div></pre></td></tr></table></figure>
<p>现在在根目录下输入下面命令，应该可以看到和上面执行相同的效果：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="keyword">test</span>.<span class="keyword">app</span></div></pre></td></tr></table></figure>
<p>到此，Mac下的可执行文件已制作完成，如果想将test.app制作成可以安装的dmg文件，可以使用系统自带的磁盘工具，具体参考：</p>
<p><a href="http://blog.yorkgu.me/2015/05/12/how-to-make-dmg-files-in-mac-osx/" target="_blank" rel="external">http://blog.yorkgu.me/2015/05/12/how-to-make-dmg-files-in-mac-osx/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍在windows和mac下如果使用nw.js来制作桌面应用程序，以及如何制作成安装包，本文不涉及nw.js的开发，只是用nw.js做壳包一个web应用而已。&lt;/p&gt;
&lt;h2 id=&quot;一些参考链接&quot;&gt;&lt;a href=&quot;#一些参考链接&quot; class=&quot;headerl
    
    </summary>
    
      <category term="Nodejs" scheme="http://www.fwhyy.com/categories/Nodejs/"/>
    
    
      <category term="mac" scheme="http://www.fwhyy.com/tags/mac/"/>
    
      <category term="nodejs" scheme="http://www.fwhyy.com/tags/nodejs/"/>
    
      <category term="nwjs" scheme="http://www.fwhyy.com/tags/nwjs/"/>
    
  </entry>
  
  <entry>
    <title>C#操作AD修改用户密码</title>
    <link href="http://www.fwhyy.com/2015/09/csharp-operation-ad-to-modify-the-user-password/"/>
    <id>http://www.fwhyy.com/2015/09/csharp-operation-ad-to-modify-the-user-password/</id>
    <published>2015-09-23T16:00:00.000Z</published>
    <updated>2016-09-02T01:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文的标题是C#操作AD来修改用户密码，其实在微软的API中没有修改密码的方法（我理解的修改密码是需要输入旧密码进行验证），只有重置密码的方法。重置密码的代码大概如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">user</span><span class="selector-class">.Invoke</span>(<span class="string">"SetPassword"</span>, new object[] &#123; newPassword &#125;);</div><div class="line"><span class="selector-tag">user</span><span class="selector-class">.CommitChanges</span>();</div></pre></td></tr></table></figure>
<p>本文主要来谈谈怎样在没有提供修改密码方法的前提下来进行密码的修改，主要是对旧密码的验证。</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>C#验证一个AD账户的密码是否正确通常的方式是new一个用户Entry对象看是否报异常，如果没有异常说明密码是正确的，代码如下：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">using (<span class="keyword">user</span> <span class="title">= new</span> DirectoryEntry(LDAPAddress, account, password,      AuthenticationTypes.Secure))</div><div class="line">&#123;</div><div class="line">      object obj = user.NativeObject;</div><div class="line">      user.Close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在如果用户的密码过期，或是创建用户的时候勾选了“用户下次登录必须修改密码”，调用上面的代码即便是正确的密码也会抛异常，异常信息为“用户名或密码不正确”，这样就无法对旧密码进行校验了。通过对异常信息的分析终于找到解决的办法。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>按上面的描述会有四种情况：</p>
<ol>
<li>密码过期，校验时输入的正确密码；</li>
<li>密码过期，校验时输入的错误密码；</li>
<li>勾选了“下次登录必须修改密码”，校验时输入正确的密码；</li>
<li>勾选了“下次登录必须修改密码”，校验时输入错误的密码。</li>
</ol>
<p>取异常信息的代码如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">catch</span> (Exception ex)</div><div class="line">&#123;</div><div class="line">     <span class="attribute">string</span> extendError = </div><div class="line">                ((System.DirectoryServices.DirectoryServicesCOMException)(ex)).ExtendedErrorMessage;</div><div class="line">     <span class="attribute">if</span> (extendError.Contains(<span class="string">"data 773"</span>) ||  extendError.Contains(<span class="string">"data 532"</span>))</div><div class="line">     &#123;</div><div class="line">         <span class="attribute">result</span> = ADLoginResult.Success;</div><div class="line">     &#125;</div><div class="line">     <span class="section">else</span></div><div class="line">     &#123;</div><div class="line">          <span class="attribute">errMsg</span> = ex.Message + <span class="string">"请联系管理员！"</span>;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>针对上面的四种情况，得到的异常信息如下：</p>
<blockquote>
<p>//下次登录必须修改密码 ，正确的密码<br>8009030C: LdapErr: DSID-0C0904DC, comment: AcceptSecurityContext error, data 773, v1db1</p>
<p>//下次登录必须修改密码 ，错误的密码<br>8009030C: LdapErr: DSID-0C0904DC, comment: AcceptSecurityContext error, data 52e, v1db1</p>
<p>//密码过期 ，正确的密码<br>8009030C: LdapErr: DSID-0C0904DC, comment: AcceptSecurityContext error, data 532, v1db1</p>
<p>//密码过期 ，错误的密码<br>8009030C: LdapErr: DSID-0C0904DC, comment: AcceptSecurityContext error, data 52e, v1db1</p>
</blockquote>
<p>可以看出，当密码错误时，返回的错误信息中有data 52e的数据，可以依据异常信息中的这种差别来进行旧密码的校验。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文实乃在没有找到官方相关方法后的一种无奈之举，实在是极其不优雅，不过倒可以解决问题。如果您有更好的方法，望在评论中告知。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文的标题是C#操作AD来修改用户密码，其实在微软的API中没有修改密码的方法（我理解的修改密码是需要输入旧密码进行验证），只有重置密码的方法。重置密码的代码大概如下：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="AD" scheme="http://www.fwhyy.com/categories/AD/"/>
    
    
      <category term="C#" scheme="http://www.fwhyy.com/tags/C/"/>
    
      <category term="AD" scheme="http://www.fwhyy.com/tags/AD/"/>
    
  </entry>
  
  <entry>
    <title>在Windows Server2008R2中部署WebAPI</title>
    <link href="http://www.fwhyy.com/2015/09/deploy-webapi-in-windows-server2008/"/>
    <id>http://www.fwhyy.com/2015/09/deploy-webapi-in-windows-server2008/</id>
    <published>2015-09-15T16:00:00.000Z</published>
    <updated>2016-08-31T15:28:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都是在win8或windows server2012中进行asp.net mvc或webapi程序的部署，没有发现任何问题。今天在win2008中进行asp.net webapi的部署，访问api的时候页面显示404错误。下面步骤将解决asp.net webapi在win2008中的部署问题。</p>
<p><img src="http://oec2003.qiniudn.com/3cefded1gw1ew4lvjcckcj20fh066dgx.jpg" alt="3cefded1gw1ew4lvjcckcj20fh066dgx"></p>
<h2 id="添加映射"><a href="#添加映射" class="headerlink" title="添加映射"></a>添加映射</h2><p>在iis中选中需要设置的webapi站点，双击“处理程序映射”，如下图：</p>
<p><img src="http://oec2003.qiniudn.com/3cefded1gw1ew4lvk40lvj20et06w75a.jpg" alt="3cefded1gw1ew4lvk40lvj20et06w75a"></p>
<p>在弹出框中添加对webapi的请求映射：</p>
<p><img src="http://oec2003.qiniudn.com/3cefded1gw1ew4lvjpyltj20av07u74m.jpg" alt="3cefded1gw1ew4lvjpyltj20av07u74"></p>
<p>请求路径：api /*</p>
<p>可执行文件：%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll，注意32位和64位路径的区别。</p>
<p>名称：webapi，自定义名称即可</p>
<h2 id="修改应用程序池的管道模式"><a href="#修改应用程序池的管道模式" class="headerlink" title="修改应用程序池的管道模式"></a>修改应用程序池的管道模式</h2><p>将webapi的应用程序池的管道模式修改为<strong>经典</strong></p>
<h2 id="更新dll"><a href="#更新dll" class="headerlink" title="更新dll"></a>更新dll</h2><p>映射添加之后，访问站点，不会报404错误了，但会报一些dll文件未能加载，一共有4个，名称分别如下：</p>
<ul>
<li>System.Web.WebPages.Deployment.dll</li>
<li>Microsoft.Web.Infrastructure.dll</li>
<li>System.Web.WebPages.Razor.dll</li>
<li>System.Web.WebPages.dll</li>
</ul>
<p>将上面四个dll文件复制到webapi站点到bin目录中，问题解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来都是在win8或windows server2012中进行asp.net mvc或webapi程序的部署，没有发现任何问题。今天在win2008中进行asp.net webapi的部署，访问api的时候页面显示404错误。下面步骤将解决asp.net webapi在
    
    </summary>
    
      <category term="Asp.Net MVC" scheme="http://www.fwhyy.com/categories/Asp-Net-MVC/"/>
    
    
      <category term="AspNet" scheme="http://www.fwhyy.com/tags/AspNet/"/>
    
      <category term="MVC" scheme="http://www.fwhyy.com/tags/MVC/"/>
    
      <category term="Web API" scheme="http://www.fwhyy.com/tags/Web-API/"/>
    
  </entry>
  
  <entry>
    <title>jQuery跨域调用Asp.Net Web API</title>
    <link href="http://www.fwhyy.com/2015/08/jquery-cros-access-asp-net-web-api/"/>
    <id>http://www.fwhyy.com/2015/08/jquery-cros-access-asp-net-web-api/</id>
    <published>2015-08-14T16:00:00.000Z</published>
    <updated>2016-09-02T01:22:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Asp.Net Web API是一个轻量级的Web服务，当Web API和Web程序不是部署在同一域的时候，要使用jQuery来实现调用API的接口就存在跨域的问题。下面介绍两种方式来解决jQuery调用API跨域的问题。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>IIS：IIS8.0</li>
<li>VS：VS2013</li>
<li>.Net Framework：4.5</li>
</ul>
<h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><p>微软提供了一种在服务端的跨域的方法，详细步骤可以参考下面链接：</p>
<p><a href="http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api" target="_blank" rel="external">http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api</a></p>
<p>总结一下就是下面的几个步骤：</p>
<p>1、 使用NuGet命令Install-Package Microsoft.AspNet.WebApi.Cors 安装依赖项；</p>
<p>2、 WebApiConfig类修改如下，该类在App_Start目录下。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">class</span> <span class="selector-tag">WebApiConfig</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">Register</span>(HttpConfiguration config)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Web API configuration and services</span></div><div class="line">        <span class="comment">//下面一行为跨域添加的代码</span></div><div class="line">        config<span class="selector-class">.EnableCors</span>();</div><div class="line">        <span class="comment">// Web API routes</span></div><div class="line">        config<span class="selector-class">.MapHttpAttributeRoutes</span>();</div><div class="line"></div><div class="line">        <span class="selector-tag">config</span><span class="selector-class">.Routes</span><span class="selector-class">.MapHttpRoute</span>(</div><div class="line">            <span class="attribute">name</span>: <span class="string">"DefaultApi"</span>,</div><div class="line">            <span class="attribute">routeTemplate</span>: <span class="string">"api/&#123;controller&#125;/&#123;id&#125;"</span>,</div><div class="line">            <span class="attribute">defaults</span>: new &#123; id = RouteParameter<span class="selector-class">.Optional</span> &#125;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、在Api的Controller上添加特性，如下：</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="name">EnableCors</span>(<span class="name">origins:</span><span class="string">"*"</span>,headers:<span class="string">"*"</span>,methods:<span class="string">"*"</span>)]</div><div class="line">[<span class="name">RoutePrefix</span>(<span class="string">"api/pro"</span>)]</div><div class="line">public class ProjectFilesApiController : ApiController</div><div class="line">&#123;</div></pre></td></tr></table></figure>
<p>origins： 访问API的客户端的地址，比如<a href="http://localhost:8001" target="_blank" rel="external">http://localhost:8001</a> ，如有多个可以用逗号隔开，设置为*号表示任何客户端都可以访问。</p>
<h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h2><p>第二种方法相对比较简单，只是修改下配置文件即可。</p>
<p><img src="http://oec2003.qiniudn.com/3cefded1gw1ev2lixluhwj20jr08tq5a.jpg" alt="3cefded1gw1ev2lixluhwj20jr08tq5a"></p>
<p>配置文件代码如下：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;system.webServer&gt;</div><div class="line">  &lt;httpProtocol&gt;</div><div class="line">    &lt;customHeaders&gt;</div><div class="line">      &lt;add name=<span class="string">"Access-Control-Allow-Origin"</span> value=<span class="string">"*"</span> /&gt;</div><div class="line">      &lt;add name=<span class="string">"Access-Control-Allow-Headers"</span> value=<span class="string">"Content-Type"</span> /&gt;</div><div class="line">      &lt;add name=<span class="string">"Access-Control-Allow-Methods"</span> value=<span class="string">"<span class="keyword">GET</span>, <span class="keyword">POST</span>, <span class="keyword">PUT</span>, <span class="keyword">DELETE</span>, <span class="keyword">OPTIONS</span>"</span> /&gt;</div><div class="line">    &lt;/customHeaders&gt;</div><div class="line">  &lt;/httpProtocol&gt;</div><div class="line"></div><div class="line">  &lt;handlers&gt;</div><div class="line">    &lt;remove name=<span class="string">"ExtensionlessUrlHandler-Integrated-4.0"</span> /&gt;</div><div class="line">    &lt;!--&lt;remove name=<span class="string">"OPTIONSVerbHandler"</span> /&gt;--&gt;</div><div class="line">    &lt;remove name=<span class="string">"TRACEVerbHandler"</span> /&gt;</div><div class="line">    &lt;add name=<span class="string">"ExtensionlessUrlHandler-Integrated-4.0"</span> path=<span class="string">"*."</span> verb=<span class="string">"*"</span> type=<span class="string">"System.Web.Handlers.TransferRequestHandler"</span> preCondition=<span class="string">"integratedMode,runtimeVersionv4.0"</span> /&gt;</div><div class="line">  &lt;/handlers&gt;</div><div class="line">  &lt;directoryBrowse enabled=<span class="string">"true"</span> /&gt;</div><div class="line">&lt;/system.webServer&gt;</div></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>上面的两种方法都可以达到跨域的效果，但是这两种方法都只支持IE10+，Chrome下没有问题。想要支持IE10以下的浏览器，需要在调用之前设置下jQuery的跨域属性，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">corsTest</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//设置jQuery支持跨域</span></div><div class="line">    jQuery.support.cors = <span class="literal">true</span>;</div><div class="line">    $.ajax(&#123;</div><div class="line">        url: <span class="string">"http://localhost:8010/api/pro/empty"</span>,</div><div class="line">        type: <span class="string">"POST"</span>,</div><div class="line">        dataType: <span class="string">"json"</span>,</div><div class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            alert(data);</div><div class="line">        &#125;,</div><div class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">            alert(a);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Asp.Net Web API是一个轻量级的Web服务，当Web API和Web程序不是部署在同一域的时候，要使用jQuery来实现调用API的接口就存在跨域的问题。下面介绍两种方式来解决jQuery调用API跨域的问题。&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="JQuery" scheme="http://www.fwhyy.com/categories/JQuery/"/>
    
    
      <category term="Web API" scheme="http://www.fwhyy.com/tags/Web-API/"/>
    
      <category term="JQuery" scheme="http://www.fwhyy.com/tags/JQuery/"/>
    
      <category term="Cros" scheme="http://www.fwhyy.com/tags/Cros/"/>
    
  </entry>
  
  <entry>
    <title>开源上传组件stream的.Net后台实现</title>
    <link href="http://www.fwhyy.com/2015/08/stream-aspnet/"/>
    <id>http://www.fwhyy.com/2015/08/stream-aspnet/</id>
    <published>2015-08-12T16:00:00.000Z</published>
    <updated>2016-09-27T13:29:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>stream是一款功能很强大的上传组件，支持Html5和Flash两种方式，Html5可以支持断点续传，进度、剩余时间等的显示。但后台代码实现目前只有Java和PHP的版本，参考PHP的版本我实现了一个.Net的版本，目前只支持Html5的方式，代码已经放到了Github上：</p>
<ol>
<li>.Net版本实现：<a href="https://github.com/oec2003/StreamAspNet" target="_blank" rel="external">https://github.com/oec2003/StreamAspNet</a></li>
<li>stream上传组件主页：<a href="http://www.twinkling.cn/" target="_blank" rel="external">http://www.twinkling.cn/</a></li>
<li>stream上传组件项目地址：<a href="http://git.oschina.net/jiangdx/stream" target="_blank" rel="external">http://git.oschina.net/jiangdx/stream</a></li>
</ol>
<h2 id="项目结构图如下："><a href="#项目结构图如下：" class="headerlink" title="项目结构图如下："></a>项目结构图如下：</h2><p><img src="http://oec2003.qiniudn.com/3cefded1gw1ev09rbskuoj20880eeab8.jpg" alt="项目结构图"></p>
<ul>
<li>common： 一些公共的帮助类和实体类</li>
<li>css： stream的css文件和图片</li>
<li>js： stream的js文件</li>
<li>lib： 第三方dll</li>
<li>swf： stream的flash文件</li>
<li>upload： 存放上传的文件和tokens</li>
<li>FileUpload： 一般处理程序，用来进行文件的操作</li>
</ul>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul>
<li>使用VS2012或VS2013打开项目，直接运行</li>
<li>将程序部署在IIS中进行访问</li>
</ul>
<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="http://oec2003.qiniudn.com/3cefded1gw1ev0a2g8kg7j20h90fhabc.jpg" alt="运行效果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;stream是一款功能很强大的上传组件，支持Html5和Flash两种方式，Html5可以支持断点续传，进度、剩余时间等的显示。但后台代码实现目前只有Java和PHP的版本，参考PHP的版本我实现了一个.Net的版本，目前只支持Html5的方式，代码已经放到了Github上
    
    </summary>
    
      <category term="Asp.Net" scheme="http://www.fwhyy.com/categories/Asp-Net/"/>
    
    
      <category term="C#" scheme="http://www.fwhyy.com/tags/C/"/>
    
      <category term="DotNet" scheme="http://www.fwhyy.com/tags/DotNet/"/>
    
      <category term="stream" scheme="http://www.fwhyy.com/tags/stream/"/>
    
  </entry>
  
  <entry>
    <title>C#访问群集部署时的MongoDB</title>
    <link href="http://www.fwhyy.com/2015/08/mongodb-access-to-the-csharp-of-the-cluster/"/>
    <id>http://www.fwhyy.com/2015/08/mongodb-access-to-the-csharp-of-the-cluster/</id>
    <published>2015-08-12T16:00:00.000Z</published>
    <updated>2016-09-02T01:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>普通的MongoDB部署有一台主、一台备，程序连接MongoDB时需要主服务器的地址以及端口，当群集部署的时候就会有多个服务器地址需要连接，MongoDB的C# API可以支持同时连接多台服务器。</p>
<h2 id="单台"><a href="#单台" class="headerlink" title="单台"></a>单台</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MongoClient mc = new MongoClient(<span class="string">"mongodb://oec2003:20720"</span>);</div><div class="line">MongoServer <span class="keyword">ms</span> <span class="title">= mc</span>.GetServer();</div><div class="line">MongoDatabase md = ms.GetDatabase(<span class="string">"DBName"</span>);</div></pre></td></tr></table></figure>
<h3 id="群集"><a href="#群集" class="headerlink" title="群集"></a>群集</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;MongoServerAddress&gt; <span class="built_in">list</span> = <span class="literal">new</span> <span class="built_in">List</span>&lt;MongoServerAddress&gt;();</div><div class="line"><span class="built_in">list</span>.Add(<span class="literal">new</span> MongoServerAddress(<span class="string">"192.168.16.207"</span>, <span class="number">40000</span>));</div><div class="line"><span class="built_in">list</span>.Add(<span class="literal">new</span> MongoServerAddress(<span class="string">"192.168.16.208"</span>, <span class="number">40000</span>));</div><div class="line"><span class="built_in">list</span>.Add(<span class="literal">new</span> MongoServerAddress(<span class="string">"192.168.16.209"</span>, <span class="number">40000</span>));</div><div class="line">MongoClientSettings mcs = <span class="literal">new</span> MongoClientSettings();</div><div class="line">mcs.Servers = <span class="built_in">list</span>;</div><div class="line">MongoClient mc = <span class="literal">new</span> MongoClient(mcs);</div><div class="line">MongoServer ms = mc.GetServer();</div><div class="line"></div><div class="line">MongoDatabase md = ms.GetDatabase(<span class="string">"DBName"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;普通的MongoDB部署有一台主、一台备，程序连接MongoDB时需要主服务器的地址以及端口，当群集部署的时候就会有多个服务器地址需要连接，MongoDB的C# API可以支持同时连接多台服务器。&lt;/p&gt;
&lt;h2 id=&quot;单台&quot;&gt;&lt;a href=&quot;#单台&quot; class=&quot;h
    
    </summary>
    
      <category term="MongoDB" scheme="http://www.fwhyy.com/categories/MongoDB/"/>
    
    
      <category term="C#" scheme="http://www.fwhyy.com/tags/C/"/>
    
      <category term="MongoDB" scheme="http://www.fwhyy.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>读《构建之法》</title>
    <link href="http://www.fwhyy.com/2015/07/read-construction-method/"/>
    <id>http://www.fwhyy.com/2015/07/read-construction-method/</id>
    <published>2015-07-09T16:00:00.000Z</published>
    <updated>2016-09-01T05:29:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>《构建之法》刚面市不就就买了纸质版，后来出了多看版后也第一时间购买了电子版。这也是第一本同时购买了纸板和电子版的技术书籍。<a href="http://weibo.com/yeka52" target="_blank" rel="external">周筠</a>老师在微博上催过我几次书评，无奈年后一直忙于公司产品的研发，直到最近才看完，进度很缓慢。</p>
<p>《构建之法》是一本讲软件工程的书，但又不是一本传统的软件工程的书。先说下本书的几个特点：</p>
<ol>
<li>接地气，不枯燥，有很多生动的例子；</li>
<li>沿用了《移山之道》里面的人物虚拟场景，对于之前看过《移山之道》的朋友来说会觉得特别熟悉；</li>
<li>不按常理出牌，以独特的视角让阅读者能全面了解企业软件开发的过程。</li>
</ol>
<p>记忆中大学是软件工程课上每次都是老师念PPT，一学期结束唯一记住了的就是瀑布模型。没有项目实践、没有编码。除了瀑布模型里的那几个阶段的概念，还是不知道软件工程到底有什么用。所以当看到《构建之法》这本书的时候，有种相见恨晚的感觉。</p>
<p>在本书的前言部分的课程安排建议、师生关系的比喻以及八条建议直接吸引我将该书看下去。</p>
<ol>
<li>课程安排不仅可以对老师和助教提供参考，其中提到的很多在实际软件开发中的工具和方法论，对学生也有很大的参考价值。举个例子，最近半年面试了很多应届生，大多都没有用过源码管理工具，知道Git或使用过Github的更是寥寥无几。我想他们如果有幸读到这本书的话，肯定也会有相见恨晚的感觉；</li>
<li>师生关系的比喻最终说明一个道理，学习要有主观能动性，记得小时候母亲经常教导我，要将老师“要我学”变成我们自己“我要学”，这样才能提高成绩；</li>
<li>八条建议是对老师和助教的建议，我倒觉得学生从中也能反推自己应该如何来进行学习。</li>
</ol>
<p>我理解的软件工程是：利用合适的工具、手段、方法快速、高质量地完成软件开发的过程。而我们学过的软件工程都是自顶向下的，从需求分析、设计、开发、测试到最后的交付。当年在学习软件工程这门课的时候，根本就没有任何编程经验，所以那些理论知识很难理解的很透彻。</p>
<p>在《构建之法》中恰恰是按照最容易理解的步骤，从开发测试、开发人员成长、团队管理一直讲到需求分析、设计以及用户体验等。先让我们知道开发为何物，每个人都有了编码实践的经验后再一步步到需求分析、设计就会理解的更透彻。</p>
<p>一本好书除了本身的内容外，还需要能引发读者思考，能够学习到更多的扩展知识。记得之前网上有人回答怎样找到一本好的技术书时说过：</p>
<blockquote>
<p>在一本经典的书籍上找找所参考的书籍或引用的书籍，大致都还不错。</p>
</blockquote>
<p>我认为还是挺有道理的。《构建之法》的正文以及练习与讨论中有大量有价值的引用，这些内容可以让我们了解更多更广的知识，练习中大量的习题如果都能够独立思考并想办法解决的话，对我们的实际动手能力会有很大提升。</p>
<p>总之，这是一本值得反复阅读的技术书、一本可以教会我们怎样去做好一名合格软件工程师的书、一本无论是对在校学生还是一线软件工程师都会受益的书、一本很适合阅读电子版的书。本书内容很多，我也只是选了几个我认为还比较重要的视角进行了阐述，希望对您有所帮助。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《构建之法》刚面市不就就买了纸质版，后来出了多看版后也第一时间购买了电子版。这也是第一本同时购买了纸板和电子版的技术书籍。&lt;a href=&quot;http://weibo.com/yeka52&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;周筠&lt;/a&gt;老师在微博
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.fwhyy.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="构建之法" scheme="http://www.fwhyy.com/tags/%E6%9E%84%E5%BB%BA%E4%B9%8B%E6%B3%95/"/>
    
      <category term="软件工程" scheme="http://www.fwhyy.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>WordPress使用Markdown</title>
    <link href="http://www.fwhyy.com/2015/06/use-markdown-in-wordpress/"/>
    <id>http://www.fwhyy.com/2015/06/use-markdown-in-wordpress/</id>
    <published>2015-06-21T16:00:00.000Z</published>
    <updated>2016-09-02T01:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从知道有Markdown这么个东西后，就彻底喜欢上了。期间也折腾过支持Markdown格式的博客系统，如：Octopress、hexo。之前也写过几篇关于Octopress的博文：<a href="http://fwhyy.com/categories/Octopress/" target="_blank" rel="external">http://fwhyy.com/categories/Octopress/</a>。对于hexo折腾一番后发布到了github上，可以通过<a href="http://oec2003.github.io/" target="_blank" rel="external">http://oec2003.github.io/</a>访问。</p>
<p>但自从用了独立博客以后，一直使用的是WordPress，去年又迁移到了Linode的VPS上，暂时还没找到好的方式在Linode上部署hexo，所以还是决定在WordPress中使用Markdown。</p>
<h2 id="Markdown工具的选择"><a href="#Markdown工具的选择" class="headerlink" title="Markdown工具的选择"></a>Markdown工具的选择</h2><p>在WordPress中使用Markdown最直接的方式就是使用插件，WordPress中有不少Markdown的插件，我也试用过几个，效果都不怎么好。所以我的思路是使用Markdown编辑工具写好博客后转换成Html，然后将Html发布到WordPress。</p>
<p>在Windows平台下有很多的Markdown编辑工具：</p>
<ul>
<li><a href="https://www.zybuluo.com/" target="_blank" rel="external">https://www.zybuluo.com</a></li>
<li><a href="https://stackedit.io" target="_blank" rel="external">https://stackedit.io</a></li>
<li><a href="http://mahua.jser.me/" target="_blank" rel="external">http://mahua.jser.me/</a></li>
<li><a href="http://simple-markpad.qiniudn.com/" target="_blank" rel="external">Simple MarkPad</a></li>
<li>Sublime Text+Markdown插件，可以支持预览</li>
<li>为知笔记，支持Markdown，效果一般，不能所见即所得</li>
<li><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a></li>
<li><a href="http://maxiang.info/" target="_blank" rel="external">马克飞象</a>，有Web版、有Chrome的插件，其实就是一个Windows客户端、还可以和印象笔记进行同步。</li>
</ul>
<p>最终选择了马克飞象 ，原因有以下几点：</p>
<ul>
<li>有Web版，有客户端，可以支持离线写作；</li>
<li>天生的可以和印象笔记同步，就可以支持多客户端浏览；</li>
<li>支持实时显示效果，展示的效果也不错。</li>
</ul>
<h2 id="使用马克飞象"><a href="#使用马克飞象" class="headerlink" title="使用马克飞象"></a>使用马克飞象</h2><p>目前这篇博文就是在马克飞象的Chrome插件中进行编写，在马克飞象中编写好后可以导出成Html格式，Html页面展示的效果全依赖下面这个CSS文件：</p>
<p><a href="https://dn-maxiang.qbox.me/res-min/themes/marxico.css" target="_blank" rel="external">https://dn-maxiang.qbox.me/res-min/themes/marxico.css</a></p>
<p>这个CSS文件特别大，大概有2万多行，我试过直接在Wordpress中引用会和现有的Wordpress的样式有冲突，所以解决方法就是在该CSS中摘出我需要的样式，我整理了些放在Gist中：</p>
<p><a href="https://gist.github.com/oec2003/ebe7e8c76a6d5397f838" target="_blank" rel="external">https://gist.github.com/oec2003/ebe7e8c76a6d5397f838</a></p>
<p>我在WordPress中使用的是我改造后的twentytwelve主题，将整理的CSS样式追加到主题的主CSS中，路径为：wp-content\themes\twentytwelve\style.css</p>
<h2 id="写作流程"><a href="#写作流程" class="headerlink" title="写作流程"></a>写作流程</h2><ul>
<li>在马克飞象中用Markdown格式写好博客</li>
<li>导出成Html文件</li>
<li>将Html内容复制到Wordpress后台进行发布</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从知道有Markdown这么个东西后，就彻底喜欢上了。期间也折腾过支持Markdown格式的博客系统，如：Octopress、hexo。之前也写过几篇关于Octopress的博文：&lt;a href=&quot;http://fwhyy.com/categories/Octopress
    
    </summary>
    
      <category term="WordPress" scheme="http://www.fwhyy.com/categories/WordPress/"/>
    
    
      <category term="Markdown" scheme="http://www.fwhyy.com/tags/Markdown/"/>
    
      <category term="Wordprss" scheme="http://www.fwhyy.com/tags/Wordprss/"/>
    
  </entry>
  
  <entry>
    <title>Office Web App 2013发布在外网进行预览</title>
    <link href="http://www.fwhyy.com/2015/06/office-web-app-2013-preview-in-external/"/>
    <id>http://www.fwhyy.com/2015/06/office-web-app-2013-preview-in-external/</id>
    <published>2015-06-19T16:00:00.000Z</published>
    <updated>2016-09-02T01:07:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Office Web App是用来做Office文档预览的一个很好的工具，网上的很多资料大都是跟SharePoint集成、Lync集成等，并且基本都是在内网部署。本文主要介绍下怎样在外网部署实现预览功能。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>OWA的安装可以参考下面链接：</p>
<p><a href="https://technet.microsoft.com/zh-cn/library/jj219455.aspx" target="_blank" rel="external">https://technet.microsoft.com/zh-cn/library/jj219455.aspx</a></p>
<p>有关安装OWA的PowerShell命令可以参考下面链接：</p>
<p><a href="http://technet.microsoft.com/zh-cn/library/ee890080.aspx" target="_blank" rel="external">http://technet.microsoft.com/zh-cn/library/ee890080.aspx</a></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>OWA不能安装在域控上，所以必须准备两台服务器，如下：</p>
<ul>
<li>域控服务器<ul>
<li>服务器版本：Windows Server2012R2</li>
<li>域名：fwhyy.com</li>
<li>内网IP：10.15.3.160</li>
<li>外网IP：100.180.100.180</li>
</ul>
</li>
<li>OWA服务器<ul>
<li>服务器版本：Windows Server2012R2</li>
<li>完整机器名：owa.fwhyy.com</li>
<li>内网IP：10.15.3.180</li>
<li>外网IP：100.180.100.181</li>
</ul>
</li>
<li>申请外网域名：owa.fwhyy.com，绑定到OWA服务器的外网IP：100.180.100.181</li>
</ul>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>1.在OWA服务器上执行下面PowerShell命令：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">New</span>-OfficeWebAppsFarm -InternalUrl <span class="string">"http://10.15.3.180"</span> -AllowHttp -EditingEnabled -OpenFromUrlEnabled</div></pre></td></tr></table></figure>
<p>注意InternalUrl 需要配置内网IP</p>
<p>2.命令成功执行后，会在IIS中创建两个站点，如下图：</p>
<p><img src="media/3cefded1gw1etayjjaz24j20ea0530ta.jpg" alt="3cefded1gw1etayjjaz24j20ea0530ta"></p>
<p>3.在浏览器中输入：<a href="http://owa.fwhyy.com/hosting/discovery" target="_blank" rel="external">http://owa.fwhyy.com/hosting/discovery</a>会得到一个放回xml结果的页面，<strong>该xml文件中显示的地址为内网IP，需要将内网IP换成域名：owa.fwhyy.com</strong>。保存该页面为discovery.xml文件留作备用。不同类型的文档会指向不同的页面来做预览，生成预览链接时会用到discovery.xml文件。</p>
<p>4.如果要将OWA的预览功能和自己的应用程序进行整合，还需要有一个Web API程序进行辅助，有关这部分内容可以参考下面链接：</p>
<p><a href="http://www.cnblogs.com/poissonnotes/p/3267190.html" target="_blank" rel="external">http://www.cnblogs.com/poissonnotes/p/3267190.html</a></p>
<p><a href="http://www.cnblogs.com/poissonnotes/p/3277280.html" target="_blank" rel="external">http://www.cnblogs.com/poissonnotes/p/3277280.html</a></p>
<p>具体请求流程参见下图：</p>
<p><img src="media/3cefded1gw1etazsxxv5aj20dl0e1t96.jpg" alt="3cefded1gw1etazsxxv5aj20dl0e1t96"></p>
<p>5.除了discovery.xml中的地址需要修改为域名，其他所有涉及到有请求的地方全部使用内网IP。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>外网访问其实关键的是需要注意三点：</p>
<ul>
<li>使用PowerShell命令创建站点时使用内网IP；</li>
<li>需要用域名进行访问，并且申请的域名必须和OWA服务器的完整机器名一致；</li>
<li>只有discovery.xml中的地址需要为域名，其他所有都是用内网IP。</li>
</ul>
<p>后面会单独开篇来写一个简单的示例，包含改造后的WopiHosting部分。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Office Web App是用来做Office文档预览的一个很好的工具，网上的很多资料大都是跟SharePoint集成、Lync集成等，并且基本都是在内网部署。本文主要介绍下怎样在外网部署实现预览功能。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; clas
    
    </summary>
    
      <category term="Office Web App" scheme="http://www.fwhyy.com/categories/Office-Web-App/"/>
    
    
      <category term="Web API" scheme="http://www.fwhyy.com/tags/Web-API/"/>
    
      <category term="Office Web App" scheme="http://www.fwhyy.com/tags/Office-Web-App/"/>
    
  </entry>
  
</feed>
